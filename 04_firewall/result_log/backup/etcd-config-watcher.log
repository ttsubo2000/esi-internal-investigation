2018-02-12 07:38:11,045:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:11,046:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:11,046:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:11,047:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:11,050:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,097:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/network],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "network", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Network template\n\nparameters:\n  uuid:\n    type: string\n    label: Virtual Network UUID\n    description: UUID of the virtual network that will be created.\n    default: \"\"\n  name:\n    type: string\n    label: Virtual Network Name\n    description: Name of the virtual network that will be created.\n  forwarding_mode:\n    type: string\n    label: Forwarding Mode\n    description: Forwarding Mode.\n    default: 'l2_l3'\n  route_targets:\n    type: comma_delimited_list\n    label: Route Targets list\n    default: []\n  shared:\n    type: boolean\n    label: Shared Network\n    default: false\n  external:\n    type: boolean\n    label: External Network\n    default: true\n  allow_transit:\n    type: boolean\n    label: Allow Transit\n    default: false\n  admin_state_up:\n    type: boolean\n    label: Admin state up\n    default: true\n\nresources:\n  network:\n    type: OS::Contrail::VirtualNetwork\n    properties:\n      uuid: { get_param: uuid }\n      name: { get_param: name }\n      forwarding_mode: { get_param: forwarding_mode }\n      route_targets: { get_param: route_targets }\n      shared: { get_param: shared }\n      admin_state_up: { get_param: admin_state_up }\n\noutputs:\n  id:\n    description: A unique id for the virtual network.\n    value: { get_resource: network }\n  name:\n    description: The name of the virtual network.\n    value: { get_attr: [network, name] }\n  fq_name:\n    description: The FQ name of the virtual network.\n    value: { get_attr: [network, fq_name] }\n  route_targets:\n    description: The name of the virtual network.\n    value: { get_attr: [network, route_targets] }\n", 
        "parameter_mappings": {
            "uuid": "Pid", 
            "heat_timeout": "C3", 
            "name": "Pid", 
            "admin_state_up": "Padmin_state_up"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,098:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,098:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,099:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,099:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,101:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,107:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/subnet],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "subnet", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Subnet template\n\nparameters:\n  name:\n    type: string\n    label: Local Subnet Name\n    description: Name of the local subnet that will be created.\n  network_id:\n    type: string\n    label: Network ID\n    description: ID of the network for which subnet will be created.\n  cidr:\n    type: string\n    label: Local Subnet IP prefix\n    description: IP prefix of the local subnet that will be created.\n  gateway_ip:\n    default: \"0.0.0.0\"\n    type: string\n    label: Default Gateway\n    description: Default gateway for the local subnet that will be created.\n  ipam:\n    type: string\n    label: IP Address Management\n    description: IPAM for the local subnet that will be created.\n    default: ''\n  enable_dhcp:\n    type: boolean\n    label: Enable DHCP\n    description: Enable DHCP\n    default: true\n  dhcp_server_address:\n    type: string\n    label: DHCP Server address\n    description: DHCP Server address\n    default: \"0.0.0.0\"\n  allocation_pools:\n    type: string\n    label: Allocation Pools\n    description: Allocation Pools\n    default: []\n  dns_nameservers:\n    type: comma_delimited_list\n    label: DNS Nameservers List\n    description: DNS Nameservers List\n    default: []\n  ntp_servers:\n    type: comma_delimited_list\n    label: NTP Nameservers List\n    description: NTP Nameservers List\n    default: []\n  host_routes:\n    type: json\n    label: Host Routes\n    description: Host Routes\n    default: []\n\nresources:\n  subnet:\n    type: OS::Contrail::VnSubnet\n    properties:\n      name: { get_param: name }\n      network_id: { get_param: network_id }\n      ip_prefix: { get_param: cidr }\n      default_gateway: { get_param: gateway_ip }\n      ipam: { get_param: ipam }\n      enable_dhcp: { get_param: enable_dhcp }\n      dns_server_address: { get_param: dhcp_server_address }\n      dns_nameservers: { get_param: dns_nameservers }\n      ntp_servers: { get_param: ntp_servers }\n      host_routes: { get_param: host_routes }\n      allocation_pools: { get_param: allocation_pools }\n      gateway_is_vrouter: false\n\noutputs:\n  id:\n    description: A unique id for the local subnet.\n    value: { get_resource: subnet }\n  name:\n    description: The name of the local subnet.\n    value: { get_attr: [subnet, name] }\n  network_id:\n    description: A unique id for the network.\n    value: { get_attr: [subnet, network_id] }\n  ip_prefix:\n    description: IP prefix of local subnet.\n    value: { get_attr: [subnet, ip_prefix] }\n  default_gateway:\n    description: Default gateway of local subnet.\n    value: { get_attr: [subnet, default_gateway] }\n  ipam:\n    description: IPAM this local subnet uses.\n    value: { get_attr: [subnet, ipam] }\n", 
        "parameter_mappings": {
            "name": "Pid", 
            "enable_dhcp": "Penable_dhcp", 
            "network_id": "Mnetwork:network_id:id", 
            "ipam": "Cdefault-domain:default-project:default-network-ipam", 
            "dns_nameservers": "Pdns_nameservers", 
            "heat_timeout": "C3", 
            "dhcp_server_address": "Pdhcp_server_address", 
            "ntp_servers": "Pntp_servers", 
            "allocation_pools": "Pallocation_pools", 
            "gateway_ip": "Pgateway_ip", 
            "host_routes": "Phost_routes", 
            "cidr": "Pcidr"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,107:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,108:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,109:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,110:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,116:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,118:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/port],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "port", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Virtual Machine Interface Template\n\nparameters:\n  uuid:\n    type: string\n    label: Backend Virtual Machine Interface UUID\n    description: A unique id for the Virtual Machine Interface.\n  name:\n    type: string\n    label: Physical Interface ID\n    description: A unique id for the Physical Interface.\n  security_groups:\n    type: json\n    default: []\n    label: Security Groups List\n    description: The IDs of security groups applied to the port.\n  virtual_machine_interface_allowed_address_pairs:\n    type: json\n    label: Virtual machine interface allowed address pairs.\n  virtual_machine_interface_mac_address:\n    type: string\n    default: \"fe:ff:ff:ff:ff:ff\"\n    label: Virtual machine interface mac address.\n  virtual_network:\n    type: string\n    label: Virtual Network.\n  virtual_machine:\n    type: string\n    label: Virtual Machine.\n    default: \"\"\n  device_owner:\n    type: string\n    label: Device Owner\n    default: \"\"\n  admin_state_up:\n    type: boolean\n    label: Admin state up\n    default: true\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n  virtual_machine_interface:\n    type: OS::Contrail::VirtualMachineInterface\n    properties:\n      uuid: { get_param: uuid }\n      name: { get_param: name }\n      virtual_machine_interface_allowed_address_pairs: { get_param: virtual_machine_interface_allowed_address_pairs }\n      virtual_machine_interface_mac_addresses: [ { get_param: virtual_machine_interface_mac_address } ]\n      virtual_networks: [ { get_param: virtual_network } ]\n      virtual_machine: { get_param: virtual_machine }\n      device_owner: { get_param: device_owner }\n      admin_state_up: { get_param: admin_state_up }\n      security_groups: { get_param: security_groups }\n\n{% for fixed_ip in jinja_fixed_ips %}\n{% set instance_ip_id = 'instance_ip_' + (loop.index0|string) %}\n  {{ instance_ip_id }}:\n    type: OS::Contrail::InstanceIp\n    properties:\n      name:\n        str_replace:\n          template: '%name%_%zone%_%ip%'\n          params:\n            \"%name%\": { get_param: name }\n            \"%zone%\": {{ fixed_ip.subnet_id }}\n            \"%ip%\": {{ fixed_ip.ip_address }}\n      ip_address: {{ fixed_ip.ip_address }}\n      subnet_id: {{ jinja_subnets[loop.index0] }}\n      network_id: { get_param: virtual_network }\n      virtual_machine_interfaces: [ { get_resource: virtual_machine_interface } ]\n{% endfor %}\n\n{% if jinja_device_owner and jinja_attached %}\n  vmi_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: virtual_machine_interface\n      resource_type: ports\n      resource_id: { get_param: uuid }\n      field_name: vmi\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      properties:\n        fq_name: { get_attr: [virtual_machine_interface, fq_name] }\n      syncer_properties:\n        etcd:\n          status:\n            key: vmi\n        tsdb:\n          traffic.in:\n            metric: traffic.contrail_bytes\n            tags:\n              resource_id: { get_param: uuid }\n              direction: in\n          traffic.out:\n            metric: traffic.contrail_bytes\n            tags:\n              resource_id: { get_param: uuid }\n              direction: out\n    depends_on: virtual_machine_interface\n{% endif %}\n\noutputs:\n  id:\n    description: A unique id for the virtual machine interface.\n    value: { get_resource: virtual_machine_interface }\n  mac_address:\n    description: Virtual machine interface mac address.\n    value: { get_attr: [virtual_machine_interface, virtual_machine_interface_mac_addresses] }\n  allowed_address_pairs:\n    description: Virtual machine allowed address pairs.\n    value: { get_attr: [virtual_machine_interface, virtual_machine_interface_allowed_address_pairs] }\n  virtual_network:\n    description: Virtual network.\n    value: { get_attr: [virtual_machine_interface, virtual_networks] }\n  fq_name:\n    description: Fully Qualified Name of the VMI\n    value: { get_attr: [virtual_machine_interface, fq_name] }\n{% if jinja_device_owner and jinja_attached %}\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: vmi_monitor }\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [vmi_monitor, link] }\n{% endif %}\n", 
        "parameter_mappings": {
            "jinja_attached": "Pattached", 
            "virtual_network": "Mnetwork:network_id:id", 
            "virtual_machine": "Pdevice_id", 
            "name": "Pid", 
            "admin_state_up": "Padmin_state_up", 
            "tenant_id": "Ptenant_id", 
            "heat_timeout": "C13", 
            "virtual_machine_interface_allowed_address_pairs": "Pallowed_address_pairs", 
            "virtual_machine_interface_mac_address": "Pmac_address", 
            "device_owner": "Pdevice_owner", 
            "version": "Vauto_filled", 
            "security_groups": "Psecurity_groups", 
            "jinja_force_dependency_gw_interface": {
                "else_mapping": {
                    "constant": null
                }, 
                "if_mapping": {
                    "equal": [
                        {
                            "field": "device_owner"
                        }, 
                        {
                            "constant": "network:gw_interface"
                        }
                    ]
                }, 
                "then_mapping": {
                    "field": "id", 
                    "path": [
                        {
                            "type": "gw_interface", 
                            "id": "device_id"
                        }
                    ]
                }
            }, 
            "jinja_fixed_ips": "Pfixed_ips", 
            "jinja_force_dependency_cfg": {
                "else_mapping": {
                    "constant": null
                }, 
                "if_mapping": {
                    "equal": [
                        {
                            "field": "device_owner"
                        }, 
                        {
                            "constant": "network:common_function_gateway"
                        }
                    ]
                }, 
                "then_mapping": {
                    "field": "id", 
                    "path": [
                        {
                            "type": "common_function_gateway", 
                            "id": "device_id"
                        }
                    ], 
                    "ignore_missing": true
                }
            }, 
            "jinja_device_owner": "Pdevice_owner", 
            "jinja_subnets": {
                "for_mapping": {
                    "path": [
                        {
                            "type": "subnet", 
                            "id": "subnet_id"
                        }
                    ], 
                    "output_key": "id"
                }, 
                "for_field": "fixed_ips"
            }, 
            "uuid": "Pid"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,119:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,119:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,119:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,120:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,121:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,141:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/ese_physical_port_existing],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "ese_physical_port_existing", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Physical port template\n\nparameters:\n  physical_device_hostname:\n    type: string\n    label: Physical Device Hostname\n    description: Hostname of the physical device on which physical port will be created.\n  physical_port_name:\n    type: string\n    label: Physical Interface Name\n    description: Name of the physical port.\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the ESE Physical Port\n  device_ip:\n    type: string\n    label: Device IP Address\n    description: Device IP Address.\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n  physical_interface:\n    type: OS::Contrail::ExistingResource\n    properties:\n      fq_name:\n        - \"default-global-system-config\"\n        - { get_param: physical_device_hostname }\n        - { get_param: physical_port_name }\n      resource_type: \"physical_interface\"\n\n  interface_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_ports_status\n      resource_type: ese_physical_ports\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: port\n      properties:\n        device_ip: { get_param: device_ip }\n        if_name: { get_param: physical_port_name }\n        community_name: ESE_NODE_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: port\n    depends_on: physical_interface\n\noutputs:\n  id:\n    description: A unique id for the physical interface\n    value: { get_resource: physical_interface }\n  name:\n    description: The name of the physical interface.\n    value: { get_attr: [physical_interface, name] }\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: interface_monitor }\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [interface_monitor, link] }\n", 
        "parameter_mappings": {
            "physical_port_name": "Pname", 
            "physical_device_hostname": "Fese_device+ese_device_id:hostname", 
            "tenant_id": "Ptenant_id", 
            "device_ip": "Fese_device+ese_device_id:management_ip_address", 
            "heat_timeout": "C6", 
            "version": "Vauto_filled", 
            "gohan_id": "Pid"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,141:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,143:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,143:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,144:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,146:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,150:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/ese_physical_port_new],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "ese_physical_port_new", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Physical port template\n\nparameters:\n  physical_device:\n    type: string\n    label: Physical Device Id\n    description: Id of the physical device on which physical port will be created.\n  physical_port_name:\n    type: string\n    label: Physical Interface Name\n    description: Name of the physical port.\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the ESE Physical Port\n  device_ip:\n    type: string\n    label: Device IP Address\n    description: Device IP Address.\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n  physical_interface:\n    type: OS::Contrail::PhysicalInterface\n    properties:\n      name: { get_param: physical_port_name }\n      physical_router: { get_param: physical_device }\n\n  interface_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_ports_status\n      resource_type: ese_physical_ports\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: port\n      properties:\n        device_ip: { get_param: device_ip }\n        if_name: { get_param: physical_port_name }\n        community_name: ESE_NODE_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: port\n    depends_on: physical_interface\n\noutputs:\n  id:\n    description: A unique id for the physical interface\n    value: { get_resource: physical_interface }\n  name:\n    description: The name of the physical interface.\n    value: { get_attr: [physical_interface, name] }\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: interface_monitor }\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [interface_monitor, link] }\n", 
        "parameter_mappings": {
            "physical_port_name": "Pname", 
            "tenant_id": "Ptenant_id", 
            "device_ip": "Fese_device+ese_device_id:management_ip_address", 
            "physical_device": "Mese_device:ese_device_id:id", 
            "heat_timeout": "C6", 
            "version": "Vauto_filled", 
            "gohan_id": "Pid"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,151:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,151:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,152:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,152:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,154:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,159:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/ese_logical_port],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "ese_logical_port", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Logical port template\n\nparameters:\n  physical_port_id:\n    type: string\n    label: Physical Interface ID\n    description: A unique id for the Physical Interface.\n  logical_port_name:\n    type: string\n    label: Logical Port Name\n    description: Name of the logical port.\n  logical_port_type:\n    type: string\n    label: Logical Port Type\n    description: Type of the logical port.\n  logical_port_vlan_id:\n    type: number\n    label: VLAN id for Logical Port\n    description: VLAN id to use for logical port creation.\n    default: 0\n  virtual_machine_interface_ids:\n    type: comma_delimited_list\n    label: Virtual Machine Interface ID\n    description: Virtual Machine Interface ID.\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the ESE Physical Port\n  device_ip:\n    type: string\n    label: Device IP Address\n    description: Device IP Address.\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n  logical_interface:\n    type: OS::Contrail::LogicalInterface\n    properties:\n      name: { get_param: logical_port_name }\n      physical_interface: { get_param: physical_port_id }\n      virtual_machine_interfaces: { get_param: virtual_machine_interface_ids }\n      type: { get_param: logical_port_type }\n      vlan: { get_param: logical_port_vlan_id }\n\n  interface_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_ports\n      resource_type: ese_logical_ports\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: logical_port\n      properties:\n        device_ip: { get_param: device_ip }\n        if_name: { get_param: logical_port_name }\n        community_name: ESE_NODE_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: logical_port\n        tsdb:\n          traffic.in:\n            metric: traffic.bytes\n            tags:\n              {% for port_id in jinja_port_ids %}\n              -  resource_id: { get_param: gohan_id }\n                 port_id: {{ port_id }}\n                 direction: in\n              {% endfor %}\n          traffic.out:\n            metric: traffic.bytes\n            tags:\n              {% for port_id in jinja_port_ids %}\n              -  resource_id: { get_param: gohan_id }\n                 port_id: {{ port_id }}\n                 direction: out\n              {% endfor %}\n    depends_on: logical_interface\n\noutputs:\n  id:\n    description: A unique id for the logical interface\n    value: { get_resource: logical_interface }\n  name:\n    description: The name of the logical interface.\n    value: { get_attr: [logical_interface, name] }\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: interface_monitor }\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [interface_monitor, link] }\n", 
        "parameter_mappings": {
            "logical_port_type": "Ptype", 
            "logical_port_vlan_id": "Pvlan_id", 
            "tenant_id": "Ptenant_id", 
            "device_ip": "Fese_physical_port+ese_physical_port_id:ese_device+ese_device_id:management_ip_address", 
            "heat_timeout": "C6", 
            "jinja_port_ids": "Pport_ids", 
            "version": "Vauto_filled", 
            "virtual_machine_interface_ids": {
                "for_mapping": {
                    "path": [
                        {
                            "type": "port", 
                            "id": ""
                        }
                    ], 
                    "output_key": "id"
                }, 
                "for_field": "port_ids"
            }, 
            "logical_port_name": "Pname", 
            "gohan_id": "Pid", 
            "physical_port_id": "Mese_physical_port:ese_physical_port_id:id"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,159:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,160:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,161:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,161:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,166:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,170:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/local_subnet],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "local_subnet", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Local Subnet template\n\nparameters:\n  name:\n    type: string\n    label: Local Subnet Name\n    description: Name of the local subnet that will be created.\n  cidr:\n    type: string\n    label: Local Subnet IP prefix\n    description: IP prefix of the local subnet that will be created.\n  virtual_machine_interface_ids:\n    type: comma_delimited_list\n    label: Virtual Machine Interface IDs\n    description: Virtual Machine Interface IDs.\n    default: []\n\nresources:\n  subnet:\n    type: OS::Contrail::Subnet\n    properties:\n      name: { get_param: name }\n      ip_prefix: { get_param: cidr }\n      virtual_machine_interfaces: { get_param: virtual_machine_interface_ids }\n\noutputs:\n  id:\n    description: A unique id for the local subnet.\n    value: { get_resource: subnet }\n  name:\n    description: The name of the local subnet.\n    value: { get_attr: [subnet, name] }\n", 
        "parameter_mappings": {
            "cidr": "Pcidr", 
            "name": "Pid"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,171:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,172:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,172:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,173:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,175:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,184:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/ese_device_existing],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "ese_device_existing", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  ESE Device (existing) template\n\nparameters:\n  name:\n    type: string\n    label: Physical Router Name\n    description: Name of the physical router that will be created.\n  hostname:\n    type: string\n    label: Hostname\n    description: Name of host (vrouter) to create router on\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the ESE Device\n  device_ip:\n    type: string\n    label: Device IP Address\n    description: Device IP Address.\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n  physical_router:\n    type: OS::Contrail::ExistingResource\n    properties:\n      fq_name:\n        - \"default-global-system-config\"\n        - { get_param: hostname }\n      resource_type: \"physical_router\"\n\n  device_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_device\n      resource_type: ese_devices\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: switch\n      properties:\n        device_ip: { get_param: device_ip }\n        community_name: ESE_NODE_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: switch\n    depends_on: physical_router\n\noutputs:\n  id:\n    description: A unique id for the physical router.\n    value: { get_resource: physical_router }\n  name:\n    description: The name of the physical router.\n    value: { get_attr: [physical_router, name] }\n  fq_name:\n    description: The FQ name of the physical router.\n    value: { get_attr: [physical_router, fq_name] }\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: device_monitor }\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [device_monitor, link] }\n", 
        "parameter_mappings": {
            "hostname": "Phostname", 
            "name": "Pname", 
            "tenant_id": "Ptenant_id", 
            "device_ip": "Pmanagement_ip_address", 
            "heat_timeout": "C6", 
            "version": "Vauto_filled", 
            "gohan_id": "Pid"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,184:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,185:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,185:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,186:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,188:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,200:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/ese_device_new],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "ese_device_new", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Physical router template\n\nparameters:\n  name:\n    type: string\n    label: Physical Router Name\n    description: Name of the physical router that will be created.\n  tor_agent_names:\n    type: comma_delimited_list\n    label: TOR Agent Names\n    description: List of virtual router names of TOR agents.\n    constraints:\n      - length: { min: 1 }\n        description: List must not be empty.\n    schema:\n      '*': { type: string }\n  tsn_names:\n    type: comma_delimited_list\n    label: TOR Service Node Names\n    description: List of virtual router names of TOR service nodes.\n    constraints:\n      - length: { min: 1 }\n        description: List must not be empty.\n    schema:\n      '*': { type: string }\n  management_ip:\n    type: string\n    label: Management IP Address\n    description: Management IP Address.\n  dataplane_ip:\n    type: string\n    label: Dataplane IP Address\n    description: Dataplane Address.\n  vendor_name:\n    type: string\n    default: \"\"\n    label: Vendor Name\n    description: Vendor name of the physical router.\n  product_name:\n    type: string\n    default: \"\"\n    label: Product Name\n    description: Product name of the physical router.\n  vnc_managed:\n    type: boolean\n    default: False\n    label: VNC managed\n    description: VNC managed.\n  username:\n    type: string\n    label: Username\n    description: Username used to login to the physical router.\n  password:\n    type: string\n    label: Password\n    description: Password used to login to the physical router.\n    hidden: true\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the ESE Device\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n  physical_router:\n    type: OS::Contrail::PhysicalRouter\n    properties:\n      name: { get_param: name }\n      virtual_routers:\n        'Fn::Split':\n          - ','\n          - 'Fn::Join':\n            - ','\n            - - 'Fn::Join': [',', get_param: tor_agent_names ]\n              - 'Fn::Join': [',', get_param: tsn_names ]\n      management_ip: { get_param: management_ip }\n      dataplane_ip: { get_param: dataplane_ip }\n      vendor_name: { get_param: vendor_name }\n      product_name: { get_param: product_name }\n      vnc_managed: { get_param: vnc_managed }\n      user_credentials:\n        username: { get_param: username }\n        password: { get_param: password }\n\n  device_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_device\n      resource_type: ese_devices\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: switch\n      properties:\n        device_ip: { get_param: management_ip }\n        community_name: ESE_NODE_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: switch\n    depends_on: physical_router\n\noutputs:\n  id:\n    description: A unique id for the physical router.\n    value: { get_resource: physical_router }\n  name:\n    description: The name of the physical router.\n    value: { get_attr: [physical_router, name] }\n  fq_name:\n    description: The FQ name of the physical router.\n    value: { get_attr: [physical_router, fq_name] }\n  vendor_name:\n    description: The vendor name of the physical router.\n    value: { get_attr: [physical_router, vendor_name] }\n  product_name:\n    description: The product name of the physical router.\n    value: { get_attr: [physical_router, product_name] }\n  management_ip:\n    description: The managment IP of the physical router.\n    value: { get_attr: [physical_router, management_ip] }\n  dataplane_ip:\n    description: The dataplane IP of the physical router.\n    value: { get_attr: [physical_router, dataplane_ip] }\n  vnc_managed:\n    description: Physical rotuer vnc managed.\n    value: { get_attr: [physical_router, vnc_managed] }\n  virtual_routers:\n    description: List of virtual routers.\n    value: { get_attr: [physical_router, virtual_routers] }\n  physical_interfaces:\n    description: List of physical interfaces attached.\n    value: { get_attr: [physical_router, physical_interfaces] }\n  logical_interfaces:\n    description: List of logical interfaces attached.\n    value: { get_attr: [physical_router, logical_interfaces] }\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: device_monitor }\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [device_monitor, link] }\n", 
        "parameter_mappings": {
            "username": "Pusername", 
            "vendor_name": "CJuniper", 
            "name": "Phostname", 
            "tenant_id": "Ptenant_id", 
            "management_ip": "Pmanagement_ip_address", 
            "dataplane_ip": "Ppublic_ip_address", 
            "tor_agent_names": "Ptor_agent_names", 
            "heat_timeout": "C6", 
            "tsn_names": "Ptsn_names", 
            "vnc_managed": "CFalse", 
            "version": "Vauto_filled", 
            "gohan_id": "Pid", 
            "password": "Ppassword", 
            "product_name": "Pname"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,201:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,201:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,202:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,202:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,204:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,284:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/internet_gateway],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "internet_gateway", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Internet GW Instance\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_interface:\n    description: Physical port on the Primary device on which the logical port will be configured\n    label: Underlying physical interface\n    type: string\n  primary_device_logical_interface:\n    description: Name of the created logical interface on the Primary device\n    label: Logical Interface name\n    type: string\n  secondary_device_physical_interface:\n    description: Physical port on the Secondary device on which the logical port will be configured\n    label: Underlying physical interface\n    type: string\n  secondary_device_logical_interface:\n    description: Name of the created logical interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  vlan:\n    description: vlan tag used by logical interface\n    label: VLAN ID\n    type: string\n  vrf_name:\n    description: Name for VRF used by logical interface\n    label: VRF name\n    type: string\n  vrf_import_policy:\n    description: Import Policy for IGS\n    label: Import Policy\n    type: string\n  vrf_export_policy:\n    description: Export Policy for IGS\n    label: Export Policy\n    type: string\n  uplink_import_policy:\n    description: Uplink Import Policy for IGS\n    label: Uplink Import Policy\n    type: string\n  input_filter_name:\n    description: Policer name to use as input policer\n    label: Input policer name\n    type: string\n  output_filter_name:\n    description: Policer name to use as output policer\n    label: Output policer name\n    type: string\n  primary_vrrp_config_group:\n    description: Name for apply group to use for interface for VRRP\n    label: Apply group name\n    type: string\n  secondary_vrrp_config_group:\n    description: Name for apply group to use for interface for VRRP\n    label: Apply group name\n    type: string\n  inet_in_filter:\n    label: Internet Input Filter\n    type: string\n  inet_out_filter:\n    label: Internet Output Filter\n    type: string\n  prefix_list_name:\n    label: Prefix list name\n    type: string\n  filter_term_name:\n    label: Filter term name\n    type: string\n  counter_name_in:\n    type: string\n    label: Input counter name\n  counter_name_out:\n    type: string\n    label: Output counter name\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the GW Interface\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      on_update: merge\n      lock_timeout: 3000\n      configs:\n      - config:\n          str_replace:\n            params:\n              $APPLY_GROUP:\n                get_param: {{ device }}_vrrp_config_group\n              $VLAN:\n                get_param: vlan\n              $INPUT_FILTER:\n                get_param: input_filter_name\n              $OUTPUT_FILTER:\n                get_param: output_filter_name\n            template: |\n              apply-groups $APPLY_GROUP\n              vlan-id $VLAN;\n              description inet_gw;\n              family inet {\n                  filter {\n                      input $INPUT_FILTER;\n                      output $OUTPUT_FILTER;\n                  }\n              }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: vlan }\n      - config:\n          str_replace:\n            params:\n              $LIF:\n                get_param: {{ device }}_device_logical_interface\n              $IMPORT_POLICY:\n                get_param: vrf_import_policy\n              $EXPORT_POLICY:\n                get_param: vrf_export_policy\n            template: |\n                instance-type virtual-router;\n                interface $LIF;\n                routing-options instance-import $IMPORT_POLICY;\n                routing-options instance-export $EXPORT_POLICY;{% if jinja_vrf_config %}\n                {{ jinja_vrf_config }}{% endif %}\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n      - config:\n          str_replace:\n            params:\n              $VRF_NAME:\n                get_param: vrf_name\n            template: |\n              from instance $VRF_NAME;\n              then accept;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: policy-options\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: policy-statement\n            name: { get_param: uplink_import_policy }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: term\n            name: { get_param: vrf_name }\n      - config: \"\"\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: policy-options\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: prefix-list\n            name: { get_param: prefix_list_name }\n      - config:\n          str_replace:\n            params:\n              $PREFIX_LIST_NAME:\n                get_param: prefix_list_name\n              $VRF_NAME:\n                get_param: vrf_name\n            template: |\n               from {\n                  destination-prefix-list {\n                       $PREFIX_LIST_NAME;\n                  }\n               }\n               then {\n                    count $VRF_NAME_IN;\n                    accept;\n               }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: filter\n            name: { get_param: inet_in_filter }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: term\n            name: { get_param: filter_term_name }\n        additional_commands:\n          str_replace:\n            params:\n              $TERM_NAME:\n                get_param: filter_term_name\n              $INET_IN:\n                get_param: inet_in_filter\n            template: |\n              insert firewall family inet filter $INET_IN term $TERM_NAME before term all-accept\n      - config:\n          str_replace:\n            params:\n              $PREFIX_LIST_NAME:\n                get_param: prefix_list_name\n              $VRF_NAME:\n                get_param: vrf_name\n            template: |\n               from {\n                  source-prefix-list {\n                       $PREFIX_LIST_NAME;\n                  }\n               }\n               then {\n                    count $VRF_NAME_OUT;\n                    accept;\n               }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: filter\n            name: { get_param: inet_out_filter }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: term\n            name: { get_param: filter_term_name }\n        additional_commands:\n          str_replace:\n            params:\n              $TERM_NAME:\n                get_param: filter_term_name\n              $INET_OUT:\n                get_param: inet_out_filter\n            template: |\n              insert firewall family inet filter $INET_OUT term $TERM_NAME before term all-accept\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n\n{% for device in [\"primary\", \"secondary\"] %}\n  {{ device }}_igs_metric_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: igs_counter\n      resource_type: internet_gateways\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: {{ device }}_counter\n      properties:\n        counter_name_in: { get_param: counter_name_in }\n        counter_name_out: { get_param: counter_name_out }\n        host: { get_param: {{ device }}_device_ip }\n        port: { get_param: {{ device }}_device_port }\n        login: { get_param: {{ device }}_device_username }\n        password: { get_param: {{ device }}_device_password }\n        primary_device_ip: { get_param: primary_device_ip }\n        secondary_device_ip: { get_param: secondary_device_ip }\n      syncer_properties:\n        tsdb:\n          traffic.in:\n            metric: traffic.bytes\n            tags:\n              device_index: {{ device }}\n              resource_id: { get_param: gohan_id }\n              direction: in\n          traffic.out:\n            metric: traffic.bytes\n            tags:\n              device_index: {{ device }}\n              resource_id: { get_param: gohan_id }\n              direction: out\n    depends_on: netconf_configure_secondary\n{% endfor %}\n\noutputs:\n{% for device in [\"primary\", \"secondary\"] %}\n  {{ device }}_monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: {{ device }}_igs_metric_monitor}\n  {{ device }}_monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [{{ device }}_igs_metric_monitor, link]}\n{% endfor %}\n", 
        "parameter_mappings": {
            "vrf_export_policy": "Finternet_service+internet_service_id:vrf_export_policy", 
            "secondary_device_physical_interface": "Fha_interface+downlink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "counter_name_out": "APvrf_name&C_OUT", 
            "primary_device_logical_interface": "Pprimary_logical_interface_name", 
            "primary_device_password": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "gohan_id": "Pid", 
            "vrf_import_policy": "Finternet_service+internet_service_id:vrf_import_policy", 
            "prefix_list_name": "APvrf_name&C_prefix", 
            "jinja_vrf_config": "Finternet_service+internet_service_id:vrf_config", 
            "output_filter_name": "ACFILTER_&Fqos_option+qos_option_id:outgoing_policer_name", 
            "secondary_vrrp_config_group": "Finternet_service+internet_service_id:secondary_vrrp_config_group", 
            "primary_device_ip": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "version": "Vauto_filled", 
            "inet_in_filter": "Finternet_service+internet_service_id:inet_in_filter", 
            "primary_device_username": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "secondary_device_logical_interface": "Psecondary_logical_interface_name", 
            "counter_name_in": "APvrf_name&C_IN", 
            "inet_out_filter": "Finternet_service+internet_service_id:inet_out_filter", 
            "vlan": "Pvlan_id", 
            "primary_device_physical_interface": "Fha_interface+downlink_interface_id:er_physical_interface+primary_interface_id:name", 
            "uplink_import_policy": "Finternet_service+internet_service_id:uplink_import_policy", 
            "input_filter_name": "ACFILTER_&Fqos_option+qos_option_id:incoming_policer_name", 
            "filter_term_name": "APvrf_name&C_filter", 
            "tenant_id": "Ptenant_id", 
            "secondary_device_port": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "secondary_device_password": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "heat_timeout": "C60", 
            "vrf_name": "Pvrf_name", 
            "primary_vrrp_config_group": "Finternet_service+internet_service_id:primary_vrrp_config_group", 
            "secondary_device_username": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_port": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,284:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,285:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,285:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,286:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,287:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,340:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/static_route_internet],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "static_route_internet", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Internet Gateway Static Route\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  vrf_name:\n    description: Name of VRF to add this static route\n    label: VRF\n    type: string\n  route:\n    description: Static Route definition\n    label: Route\n    type: string\n  next_hop:\n    description: Next hop for the static route\n    label: Next hop\n    type: string\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config:\n          str_replace:\n            params:\n              $NEXT_HOP:\n                get_param: next_hop\n            template: |\n              next-hop $NEXT_HOP;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: routing-options\n          - config_type: tag\n            xml_type: tag\n            tag: static\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: route\n            name: { get_param: route }\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "jinja_dummy_dependency": {
                "field": "id", 
                "path": [
                    {
                        "type": "public_ip", 
                        "id": "public_ip_id"
                    }
                ], 
                "ignore_missing": true
            }, 
            "route": "Pdestination", 
            "primary_device_password": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "secondary_device_port": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_device_ip": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "heat_timeout": "C60", 
            "next_hop": "Pnexthop", 
            "vrf_name": "Finternet_gateway+internet_gw_id:vrf_name", 
            "primary_device_username": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "primary_device_port": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip", 
            "secondary_device_username": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,341:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,341:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,342:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,353:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,356:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,415:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/gw_interface_internet],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "gw_interface_internet", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Inet Address\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  vlan:\n    description: Vlan tag for mx logical interface\n    label: Vlan Tag\n    type: string\n  gw_vip:\n    description: Virtual IP configured on VRRP\n    label: Inet Address CIDR\n    type: string\n  primary_device_gw_ip:\n    description: IP on primary device\n    label: Inet Address CIDR\n    type: string\n  secondary_device_gw_ip:\n    description: IP on secondary device\n    label: Inet Address CIDR\n    type: string\n  netmask:\n    description: Netmask for gw_ip\n    label: Netmask\n    type: number\n  vrrp_group:\n    type: string\n    label: VRRP Group\n  primary_device_priority:\n    type: string\n    label: Primary device priority\n  secondary_device_priority:\n    type: string\n    label: Secondary device priority\n  vrf_name:\n    type: string\n    label: VRF\n  bgp_group_name:\n    type: string\n    label: Name of BGP Group on VRF\n  primary_ibgp_config_group:\n    description: Name for apply group to use for downlink interface\n    label: Apply group name\n    type: string\n  secondary_ibgp_config_group:\n    description: Name for apply group to use for downlink interface\n    label: Apply group name\n    type: string\n  primary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  secondary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the GW Interface\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config:\n          str_replace:\n            params:\n              $VRRP_GROUP:\n                    get_param: vrrp_group\n              $PRIORITY:\n                    get_param: {{ device }}_device_priority\n              $VIP:\n                    get_param: gw_vip\n            template: |\n                vrrp-group $VRRP_GROUP {\n                    virtual-address $VIP;\n                    priority $PRIORITY;\n                }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: vlan }\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: address\n            name:\n              str_replace:\n                params:\n                  $DEVICE_IP:\n                    get_param: {{ device }}_device_gw_ip\n                  $NETMASK:\n                    get_param: netmask\n                template: |\n                  $DEVICE_IP/$NETMASK\n      - config:\n          str_replace:\n            params:\n              $DEVICE_GW_IP:\n                    get_param: {{ device }}_device_gw_ip\n              $NEIGHBOR_GW_IP:\n                    get_param: {% if device == \"secondary\" %}primary{% else %}secondary{% endif %}_device_gw_ip\n              $APPLY_GROUP:\n                    get_param: {{ device }}_ibgp_config_group\n            template: |\n              apply-groups $APPLY_GROUP\n              local-address $DEVICE_GW_IP;\n              neighbor $NEIGHBOR_GW_IP;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: protocols\n          - config_type: tag\n            xml_type: tag\n            tag: bgp\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: group\n            name: { get_param: bgp_group_name }\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n\n  vrrp_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: vrrp_pool\n      resource_type: gw_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: status\n      properties:\n        vrid:\n          - { get_param: vrrp_group }\n        primary:\n          host: { get_param: primary_device_ip }\n          port: { get_param: primary_device_port }\n          login: { get_param: primary_device_username }\n          password: { get_param: primary_device_password }\n          interface: { get_param: primary_logical_interface_name }\n        secondary:\n          host: { get_param: secondary_device_ip }\n          port: { get_param: secondary_device_port }\n          login: { get_param: secondary_device_username }\n          password: { get_param: secondary_device_password }\n          interface: { get_param: secondary_logical_interface_name }\n      syncer_properties:\n        etcd:\n          status:\n            key: status\n          hold_options:\n            positive_status:\n              primary: MASTER\n              secondary: BACKUP\n            time_seconds: 360\n    depends_on: netconf_configure_secondary\n\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: vrrp_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [vrrp_monitor, link]}\n", 
        "parameter_mappings": {
            "secondary_device_physical_interface": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "secondary_ibgp_config_group": "Finternet_gateway+internet_gw_id:internet_service+internet_service_id:secondary_ibgp_config_group", 
            "primary_device_password": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "secondary_device_gw_ip": "Psecondary_ipv4", 
            "gohan_id": "Pid", 
            "bgp_group_name": "Cinet-gw-group", 
            "gw_vip": "Pgw_vipv4", 
            "primary_device_ip": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "version": "Vauto_filled", 
            "secondary_device_username": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "secondary_logical_interface_name": "Finternet_gateway+internet_gw_id:secondary_logical_interface_name", 
            "primary_logical_interface_name": "Finternet_gateway+internet_gw_id:primary_logical_interface_name", 
            "jinja_dummy_dependency": {
                "field": "id", 
                "path": [
                    {
                        "type": "public_ip", 
                        "id": "public_ip_id"
                    }
                ], 
                "ignore_missing": true
            }, 
            "vlan": "Finternet_gateway+internet_gw_id:vlan_id", 
            "primary_device_physical_interface": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:er_physical_interface+primary_interface_id:name", 
            "netmask": "Pnetmask", 
            "primary_device_gw_ip": "Pprimary_ipv4", 
            "vrrp_group": "Pvrid", 
            "primary_device_priority": "C105", 
            "jinja_force_dependency": {
                "field": "id", 
                "path": [
                    {
                        "type": "network", 
                        "id": "network_id"
                    }
                ]
            }, 
            "tenant_id": "Ptenant_id", 
            "secondary_device_port": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "secondary_device_password": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "heat_timeout": "C60", 
            "vrf_name": "Finternet_gateway+internet_gw_id:vrf_name", 
            "primary_device_username": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "secondary_device_priority": "C100", 
            "primary_ibgp_config_group": "Finternet_gateway+internet_gw_id:internet_service+internet_service_id:primary_ibgp_config_group", 
            "primary_device_port": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,416:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,416:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,417:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,417:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,419:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,453:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/qos_option_internet],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "qos_option_internet", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  QoS Option\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  incoming_policer_name:\n    description: Name of created incoming policer\n    label: Incoming policer name\n    type: string\n  incoming_policer_config:\n    description: Configuration of incoming policer\n    label: Incoming policer config\n    type: string\n  outgoing_policer_name:\n    description: Name of created outgoing policer\n    label: Outgoing policer name\n    type: string\n  outgoing_policer_config:\n    description: Configuration of outgoing policer\n    label: Outgoing policer config\n    type: string\n  neighbour_prefix:\n    description: Name of prefix list used to specify traffic source/destination\n    label: Neighbour prefix\n    type: string\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config:\n          { get_param: incoming_policer_config }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: three-color-policer\n            name: { get_param: incoming_policer_name }\n      - config:\n          { get_param: outgoing_policer_config }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: policer\n            name: { get_param: outgoing_policer_name }\n      - config:\n          str_replace:\n            params:\n              $PREFIX:\n                get_param: neighbour_prefix\n              $CLASS:\n                {% if jinja_type == \"besteffort\" %} {{ jinja_be_forwarding_class }} {% else %} {{ jinja_ga_forwarding_class }} {% endif %}\n              $POLICER_NAME:\n                get_param: incoming_policer_name\n            template: |\n               interface-specific;\n               term bgp-accept {\n                   from {\n                       source-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol tcp;\n                       port bgp;\n                   }\n                   then accept;\n               }\n               term vrrp-accept {\n                   from {\n                       source-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol vrrp;\n                   }\n                   then policer 10K-RE;\n                   then accept;\n               }\n               term qos {\n                   then {\n                       three-color-policer {\n                           {% if jinja_type == \"besteffort\" %}two-rate{% else %}single-rate{% endif %} $POLICER_NAME;\n                       }\n                       forwarding-class $CLASS;\n                       accept;\n                   }\n               }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: filter\n            name:\n              str_replace:\n                params:\n                  $NAME:\n                    get_param: incoming_policer_name\n                template: |\n                  FILTER_$NAME\n      - config:\n          str_replace:\n            params:\n              $PREFIX:\n                get_param: neighbour_prefix\n              $POLICER_NAME:\n                get_param: outgoing_policer_name\n            template: |\n               interface-specific;\n               term bgp-accept {\n                   from {\n                       destination-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol tcp;\n                       port bgp;\n                   }\n                   then accept;\n               }\n               term vrrp-accept {\n                   from {\n                       protocol vrrp;\n                   }\n                   then accept;\n               }\n               term policer {\n                   then {\n                       policer $POLICER_NAME;\n                       accept;\n                   }\n               }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: filter\n            name:\n              str_replace:\n                params:\n                  $NAME:\n                    get_param: outgoing_policer_name\n                template: |\n                  FILTER_$NAME\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": "Fha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "jinja_be_forwarding_class": "Finternet_service+internet_service_id:be_forwarding_class", 
            "primary_device_password": "Fha_router+ha_router_id:edge_router+primary_router_id:password", 
            "jinja_ga_forwarding_class": "Finternet_service+internet_service_id:ga_forwarding_class", 
            "incoming_policer_name": "Pincoming_policer_name", 
            "jinja_type": "Pqos_type", 
            "secondary_device_port": "Fha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_device_ip": "Fha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "heat_timeout": "C60", 
            "outgoing_policer_config": "Poutgoing_policer_config", 
            "incoming_policer_config": "Pincoming_policer_config", 
            "outgoing_policer_name": "Poutgoing_policer_name", 
            "neighbour_prefix": "Finternet_service+internet_service_id:neighbour_prefix", 
            "secondary_device_username": "Fha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_port": "Fha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Fha_router+ha_router_id:edge_router+secondary_router_id:ip", 
            "primary_device_username": "Fha_router+ha_router_id:edge_router+primary_router_id:login"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,454:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,455:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,455:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,456:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,457:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,464:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/public_ip],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "public_ip", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  QoS Option\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  prefix_list_name:\n    label: Prefix List name.\n    type: string\n  ip_cidr:\n    label: Public IP CIDR\n    type: string\n  ip_mask:\n    label: Public IP CIDR\n    type: string\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config: \"\"\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: policy-options\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: prefix-list\n            name: { get_param: prefix_list_name }\n          - config_type: name\n            xml_type: named_tag\n            tag: prefix-list-item\n            name:\n              str_replace:\n                params:\n                  $CIDR:\n                    { get_param: ip_cidr }\n                  $MASK:\n                    { get_param: ip_mask }\n                template: |\n                  $CIDR/$MASK\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "primary_device_password": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "secondary_device_port": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_device_ip": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "ip_mask": "Psubmask_length", 
            "heat_timeout": "C60", 
            "ip_cidr": "Pcidr", 
            "primary_device_username": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "secondary_device_username": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_port": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Finternet_gateway+internet_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip", 
            "prefix_list_name": "AFinternet_gateway+internet_gw_id:vrf_name&C_prefix"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,465:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,465:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,465:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,466:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,467:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,474:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/qos_option_vpn],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "qos_option_vpn", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  QoS Option\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  incoming_policer_name:\n    description: Name of created incoming policer\n    label: Incoming policer name\n    type: string\n  incoming_policer_config:\n    description: Configuration of incoming policer\n    label: Incoming policer config\n    type: string\n  outgoing_policer_name:\n    description: Name of created outgoing policer\n    label: Outgoing policer name\n    type: string\n  outgoing_policer_config:\n    description: Configuration of outgoing policer\n    label: Outgoing policer config\n    type: string\n  neighbour_prefix:\n    description: Name of prefix list used to specify traffic source/destination\n    label: Neighbour prefix\n    type: string\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config:\n          { get_param: incoming_policer_config }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: three-color-policer\n            name: { get_param: incoming_policer_name }\n      - config:\n          { get_param: outgoing_policer_config }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: policer\n            name: { get_param: outgoing_policer_name }\n      - config:\n          str_replace:\n            params:\n              $PREFIX:\n                get_param: neighbour_prefix\n              $CLASS:\n                {% if jinja_type == \"besteffort\" %} {{ jinja_be_forwarding_class }} {% else %} {{ jinja_ga_forwarding_class }} {% endif %}\n              $POLICER_NAME:\n                get_param: incoming_policer_name\n            template: |\n               interface-specific;\n               term bgp-accept {\n                   from {\n                       source-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol tcp;\n                       port bgp;\n                   }\n                   then accept;\n               }\n               term vrrp-accept {\n                   from {\n                       source-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol vrrp;\n                   }\n                   then policer 10K-RE;\n                   then accept;\n               }\n               term qos {\n                   then {\n                       three-color-policer {\n                           {% if jinja_type == \"besteffort\" %}two-rate{% else %}single-rate{% endif %} $POLICER_NAME;\n                       }\n                       forwarding-class $CLASS;\n                       accept;\n                   }\n               }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: filter\n            name:\n              str_replace:\n                params:\n                  $NAME:\n                    get_param: incoming_policer_name\n                template: |\n                  FILTER_$NAME\n      - config:\n          str_replace:\n            params:\n              $PREFIX:\n                get_param: neighbour_prefix\n              $POLICER_NAME:\n                get_param: outgoing_policer_name\n            template: |\n               interface-specific;\n               term bgp-accept {\n                   from {\n                       destination-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol tcp;\n                       port bgp;\n                   }\n                   then accept;\n               }\n               term vrrp-accept {\n                   from {\n                       protocol vrrp;\n                   }\n                   then accept;\n               }\n               term policer {\n                   then {\n                       policer $POLICER_NAME;\n                       accept;\n                   }\n               }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: filter\n            name:\n              str_replace:\n                params:\n                  $NAME:\n                    get_param: outgoing_policer_name\n                template: |\n                  FILTER_$NAME\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": "Fha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "jinja_be_forwarding_class": "Fvpn_service+vpn_service_id:be_forwarding_class", 
            "primary_device_password": "Fha_router+ha_router_id:edge_router+primary_router_id:password", 
            "jinja_ga_forwarding_class": "Fvpn_service+vpn_service_id:ga_forwarding_class", 
            "incoming_policer_name": "Pincoming_policer_name", 
            "jinja_type": "Pqos_type", 
            "secondary_device_port": "Fha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_device_ip": "Fha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "heat_timeout": "C60", 
            "outgoing_policer_config": "Poutgoing_policer_config", 
            "incoming_policer_config": "Pincoming_policer_config", 
            "outgoing_policer_name": "Poutgoing_policer_name", 
            "neighbour_prefix": "Fvpn_service+vpn_service_id:neighbour_prefix", 
            "secondary_device_username": "Fha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_port": "Fha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Fha_router+ha_router_id:edge_router+secondary_router_id:ip", 
            "primary_device_username": "Fha_router+ha_router_id:edge_router+primary_router_id:login"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,475:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,476:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,476:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,480:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,481:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,488:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/vpn_gateway],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "vpn_gateway", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  VPN Gateway\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_logical_downlink_interface:\n    description: Name of the created logical downlink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  primary_device_physical_downlink_interface:\n    description: Physical port on the Primary device on which the logical downlink port will be configured\n    label: Underlying physical interface\n    type: string\n  primary_device_logical_uplink_interface:\n    description: Name of the created logical uplink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  primary_device_physical_uplink_interface:\n    description: Physical port on the Primary device on which the logical uplink port will be configured\n    label: Underlying physical interface\n    type: string\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_logical_downlink_interface:\n    description: Name of the created logical downlink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  secondary_device_physical_downlink_interface:\n    description: Physical port on the Secondary device on which the logical downlink port will be configured\n    label: Underlying physical interface\n    type: string\n  secondary_device_logical_uplink_interface:\n    description: Name of the created logical uplink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  secondary_device_physical_uplink_interface:\n    description: Physical port on the Secondary device on which the logical uplink port will be configured\n    label: Underlying physical interface\n    type: string\n  downlink_vlan:\n    description: vlan tag used by logical downlink interface\n    label: VLAN ID\n    type: string\n  uplink_vlan:\n    description: vlan tag used by logical uplink interface\n    label: VLAN ID\n    type: string\n  vrf_name:\n    description: Name for VRF used by logical interfaces\n    label: VRF name\n    type: string\n  input_filter_name:\n    description: Name for policer used for input\n    label: Input filter name\n    type: string\n  output_filter_name:\n    description: Name for policer used for output\n    label: Output filter name\n    type: string\n  primary_downlink_vrrp_config_group:\n    description: Name for apply group to use for downlink interface for VRRP\n    label: Apply group name\n    type: string\n  secondary_downlink_vrrp_config_group:\n    description: Name for apply group to use for downlink interface for VRRP\n    label: Apply group name\n    type: string\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      on_update: merge\n      configs:\n      - config:\n          str_replace:\n            params:\n              $VLAN:\n                get_param: downlink_vlan\n              $INPUT_FILTER:\n                get_param: input_filter_name\n              $OUTPUT_FILTER:\n                get_param: output_filter_name\n              $APPLY_GROUP:\n                get_param: {{ device }}_downlink_vrrp_config_group\n            template: |\n              apply-groups $APPLY_GROUP\n              vlan-id $VLAN;\n              description vpn_gw;\n              family inet {\n                  filter {\n                      input $INPUT_FILTER;\n                      output $OUTPUT_FILTER;\n                  }\n              }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_downlink_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: downlink_vlan }\n      - config:\n          str_replace:\n            params:\n              $LIFD:\n                get_param: {{ device }}_device_logical_downlink_interface\n              $LIFU:\n                get_param: {{ device }}_device_logical_uplink_interface\n            template: |\n                instance-type virtual-router;\n                interface $LIFD;\n                interface $LIFU;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n      - config:\n          str_replace:\n            params:\n              $VLAN:\n                get_param: uplink_vlan\n            template: |\n              vlan-id $VLAN;\n              description CloudGW_vpn;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_uplink_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: uplink_vlan }\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n", 
        "parameter_mappings": {
            "primary_device_logical_uplink_interface": "Pprimary_logical_uplink_interface_name", 
            "primary_device_logical_downlink_interface": "Pprimary_logical_downlink_interface_name", 
            "primary_device_password": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "output_filter_name": "ACFILTER_&Fqos_option+qos_option_id:outgoing_policer_name", 
            "primary_device_ip": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "secondary_device_physical_downlink_interface": "Fha_interface+downlink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "secondary_device_username": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_physical_uplink_interface": "Fha_interface+uplink_interface_id:er_physical_interface+primary_interface_id:name", 
            "secondary_device_logical_uplink_interface": "Psecondary_logical_uplink_interface_name", 
            "downlink_vlan": "Pdownlink_vlan_id", 
            "secondary_device_logical_downlink_interface": "Psecondary_logical_downlink_interface_name", 
            "input_filter_name": "ACFILTER_&Fqos_option+qos_option_id:incoming_policer_name", 
            "uplink_vlan": "Puplink_vlan_id", 
            "secondary_device_port": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_downlink_vrrp_config_group": "Fvpn_service+vpn_service_id:primary_downlink_vrrp_config_group", 
            "secondary_device_password": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "heat_timeout": "C60", 
            "vrf_name": "Pvrf_name", 
            "primary_device_username": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "primary_device_physical_downlink_interface": "Fha_interface+downlink_interface_id:er_physical_interface+primary_interface_id:name", 
            "secondary_downlink_vrrp_config_group": "Fvpn_service+vpn_service_id:secondary_downlink_vrrp_config_group", 
            "primary_device_port": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_physical_uplink_interface": "Fha_interface+uplink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "secondary_device_ip": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,489:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,489:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,490:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,490:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,492:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,496:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/gw_interface_vpn],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "gw_interface_vpn", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Inet Address\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  downlink_vlan_id:\n    description: Vlan tag for mx logical downlink interface\n    label: Vlan Tag\n    type: string\n  gw_vip:\n    description: Virtual IP configured on VRRP\n    label: Inet Address CIDR\n    type: string\n  primary_device_gw_ip:\n    description: IP on primary device\n    label: Inet Address CIDR\n    type: string\n  secondary_device_gw_ip:\n    description: IP on secondary device\n    label: Inet Address CIDR\n    type: string\n  netmask:\n    description: Netmask for gw_ip\n    label: Netmask\n    type: number\n  vrrp_group:\n    type: string\n    label: VRRP Group\n  primary_device_priority:\n    type: string\n    label: Primary device priority\n  secondary_device_priority:\n    type: string\n    label: Secondary device priority\n  vrf_name:\n    type: string\n    label: VRF\n  bgp_group_name:\n    type: string\n    label: Name of BGP Group on VRF\n  local_as:\n    type: string\n    label: Local AS Number\n  primary_ibgp_config_group:\n    description: Name for apply group to use for downlink interface\n    label: Apply group name\n    type: string\n  secondary_ibgp_config_group:\n    description: Name for apply group to use for downlink interface\n    label: Apply group name\n    type: string\n  primary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  secondary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the GW Interface\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config:\n          str_replace:\n            params:\n              $VRRP_GROUP:\n                    get_param: vrrp_group\n              $PRIORITY:\n                    get_param: {{ device }}_device_priority\n              $VIP:\n                    get_param: gw_vip\n            template: |\n                vrrp-group $VRRP_GROUP {\n                    virtual-address $VIP;\n                    priority $PRIORITY;\n                }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: downlink_vlan_id }\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: address\n            name:\n              str_replace:\n                params:\n                  $DEVICE_IP:\n                    get_param: {{ device }}_device_gw_ip\n                  $NETMASK:\n                    get_param: netmask\n                template: |\n                  $DEVICE_IP/$NETMASK\n      - config:\n          str_replace:\n            params:\n              $DEVICE_GW_IP:\n                    get_param: {{ device }}_device_gw_ip\n              $NEIGHBOR_GW_IP:\n                    get_param: {% if device == \"secondary\" %}primary{% else %}secondary{% endif %}_device_gw_ip\n              $LOCAL_AS:\n                    get_param: local_as\n              $APPLY_GROUP:\n                    get_param: {{ device }}_ibgp_config_group\n            template: |\n              apply-groups $APPLY_GROUP;\n              local-address $DEVICE_GW_IP;\n              peer-as $LOCAL_AS;\n              neighbor $NEIGHBOR_GW_IP;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: protocols\n          - config_type: tag\n            xml_type: tag\n            tag: bgp\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: group\n            name: { get_param: bgp_group_name }\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n\n  vrrp_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: vrrp_pool\n      resource_type: gw_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: status\n      properties:\n        vrid:\n          - { get_param: vrrp_group }\n        primary:\n          host: { get_param: primary_device_ip }\n          port: { get_param: primary_device_port }\n          login: { get_param: primary_device_username }\n          password: { get_param: primary_device_password }\n          interface: { get_param: primary_logical_interface_name }\n        secondary:\n          host: { get_param: secondary_device_ip }\n          port: { get_param: secondary_device_port }\n          login: { get_param: secondary_device_username }\n          password: { get_param: secondary_device_password }\n          interface: { get_param: secondary_logical_interface_name }\n      syncer_properties:\n        etcd:\n          status:\n            key: status\n          hold_options:\n            positive_status:\n              primary: MASTER\n              secondary: BACKUP\n            time_seconds: 360\n    depends_on: netconf_configure_secondary\n\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: vrrp_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [vrrp_monitor, link]}\n", 
        "parameter_mappings": {
            "secondary_device_physical_interface": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "secondary_ibgp_config_group": "Fvpn_gateway+vpn_gw_id:vpn_service+vpn_service_id:secondary_ibgp_config_group", 
            "primary_device_password": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "secondary_device_gw_ip": "Psecondary_ipv4", 
            "gohan_id": "Pid", 
            "bgp_group_name": "Cinet-gw-group", 
            "gw_vip": "Pgw_vipv4", 
            "primary_device_ip": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "version": "Vauto_filled", 
            "secondary_device_username": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_username": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "downlink_vlan_id": "Fvpn_gateway+vpn_gw_id:downlink_vlan_id", 
            "secondary_logical_interface_name": "Fvpn_gateway+vpn_gw_id:secondary_logical_downlink_interface_name", 
            "primary_logical_interface_name": "Fvpn_gateway+vpn_gw_id:primary_logical_downlink_interface_name", 
            "local_as": "Fvpn_gateway+vpn_gw_id:local_as_number", 
            "primary_device_physical_interface": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:er_physical_interface+primary_interface_id:name", 
            "netmask": "Pnetmask", 
            "primary_device_gw_ip": "Pprimary_ipv4", 
            "vrrp_group": "Pvrid", 
            "primary_device_priority": "C105", 
            "jinja_force_dependency": "Fvpn_gateway+vpn_gw_id:vpn_interface+connected_vpn_interface:id", 
            "tenant_id": "Ptenant_id", 
            "secondary_device_port": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "secondary_device_password": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "heat_timeout": "C60", 
            "vrf_name": "Fvpn_gateway+vpn_gw_id:vrf_name", 
            "jinja_force_dependency2": {
                "field": "id", 
                "path": [
                    {
                        "type": "network", 
                        "id": "network_id"
                    }
                ]
            }, 
            "secondary_device_priority": "C100", 
            "primary_ibgp_config_group": "Fvpn_gateway+vpn_gw_id:vpn_service+vpn_service_id:primary_ibgp_config_group", 
            "primary_device_port": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,496:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,497:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,497:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,498:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,499:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,512:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/static_route_vpn],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "static_route_vpn", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  VPN Gateway Static Route\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  vrf_name:\n    description: Name of VRF to add this static route\n    label: VRF\n    type: string\n  route:\n    description: Static Route definition\n    label: Route\n    type: string\n  next_hop:\n    description: Next hop for the static route\n    label: Next hop\n    type: string\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config:\n          str_replace:\n            params:\n              $NEXT_HOP:\n                get_param: next_hop\n            template: |\n              next-hop $NEXT_HOP;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: routing-options\n          - config_type: tag\n            xml_type: tag\n            tag: static\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: route\n            name: { get_param: route }\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "route": "Pdestination", 
            "primary_device_password": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "secondary_device_port": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_device_ip": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "heat_timeout": "C60", 
            "next_hop": "Pnexthop", 
            "vrf_name": "Fvpn_gateway+vpn_gw_id:vrf_name", 
            "primary_device_username": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "primary_device_port": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip", 
            "secondary_device_username": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,513:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,514:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,514:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,515:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,517:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,523:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/vpn_interface],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "vpn_interface", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Inet Address\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  primary_device_logical_interface:\n    description: Name of the created logical uplink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  secondary_device_logical_interface:\n    description: Name of the created logical uplink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  vrf_name:\n    description: Name of VRF (routing-instance) in MX config\n    label: VRF Name\n    type: string\n  local_as:\n    type: number\n    label: Local AS Number\n  primary_ebgp_config_group:\n    description: Name of MX config group for eBGP config\n    label: eBGP config group\n    type: string\n  secondary_ebgp_config_group:\n    description: Name of MX config group for eBGP config\n    label: eBGP config group\n    type: string\n  uplink_vlan:\n    description: VLAN ID used on uplink interfaces (same for both primary and secondary device)\n    label: Uplink VLAN ID\n    type: string\n  primary_peer_ip:\n    description: IP address of primary router eBGP neighbour\n    label: Primary device BGP peer\n    type: string\n  secondary_peer_ip:\n    description: IP address of secondary router eBGP neighbour\n    label: Secondary device BGP peer\n    type: string\n  primary_router_id:\n    description: Primary router VRF router id\n    label: Primary router id\n    type: string\n  secondary_router_id:\n    description: Secondary router VRF router id\n    label: Secondary router id\n    type: string\n  remote_as:\n    description: eBGP remote autonomous system\n    label: Remote AS\n    type: string\n  md5:\n    description: eBGP authentication key\n    label: eBGP authentication key\n    type: string\n  bgp_group_name:\n    description: Name of eBGP group\n    label: eBGP group name\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the VPN Interface\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n{% set primary_ip_uplink_split = jinja_primary_uplink_ip.split('/') %}\n{% set secondary_ip_uplink_split = jinja_secondary_uplink_ip.split('/') %}\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config: \"\"\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: uplink_vlan }\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: address\n            name: {% if device == \"primary\" %} {{ jinja_primary_uplink_ip }} {% else %} {{ jinja_secondary_uplink_ip }} {% endif %}\n      - config:\n          str_replace:\n            params:\n              $NEIGHBOR_IP:\n                    get_param: {{ device }}_peer_ip\n              $REMOTE_AS:\n                    get_param: remote_as\n              $APPLY_GROUP:\n                    get_param: {{ device }}_ebgp_config_group\n              $KEY:\n                    get_param: md5\n            template: |\n              apply-groups $APPLY_GROUP;\n              local-address {% if device == \"primary\" %} {{ primary_ip_uplink_split[0] }} {% else %} {{ secondary_ip_uplink_split[0] }} {% endif %};\n              peer-as $REMOTE_AS;\n              neighbor $NEIGHBOR_IP authentication-key $KEY;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: protocols\n          - config_type: tag\n            xml_type: tag\n            tag: bgp\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: group\n            name: { get_param: bgp_group_name }\n      - config:\n          str_replace:\n            params:\n              $ROUTER_ID:\n                    get_param: {{device}}_router_id\n              $LOCAL_AS:\n                    get_param: local_as\n            template: |\n              router-id $ROUTER_ID;\n              autonomous-system $LOCAL_AS;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: routing-options\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n\n  bgp_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: bgp_pool\n      resource_type: vpn_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: status\n      properties:\n        instance: { get_param: vrf_name }\n        primary:\n          host: { get_param: primary_device_ip }\n          port: { get_param: primary_device_port }\n          login: { get_param: primary_device_username }\n          password: { get_param: primary_device_password }\n          peer_address: { get_param: primary_peer_ip }\n        secondary:\n          host: { get_param: secondary_device_ip }\n          port: { get_param: secondary_device_port }\n          login: { get_param: secondary_device_username }\n          password: { get_param: secondary_device_password }\n          peer_address: { get_param: secondary_peer_ip }\n      syncer_properties:\n        etcd:\n          status:\n            key: status\n    depends_on: netconf_configure_secondary\n\n{% for device in [\"primary\", \"secondary\"] %}\n  {{ device }}_interface_metric_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_ports_metric\n      resource_type: vpn_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: {{ device }}_router\n      properties:\n        device_ip: { get_param: {{ device }}_device_ip }\n        if_name: { get_param: {{ device }}_device_logical_interface }\n        community_name: EDGE_ROUTER_COMMUNITY\n      syncer_properties:\n        tsdb:\n          traffic.in:\n            metric: traffic.bytes\n            tags:\n              device_index: {{ device }}\n              resource_id: { get_param: gohan_id }\n              direction: in\n          traffic.out:\n            metric: traffic.bytes\n            tags:\n              device_index: {{ device }}\n              resource_id: { get_param: gohan_id }\n              direction: out\n    depends_on: bgp_monitor\n{% endfor %}\n\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: bgp_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [bgp_monitor, link]}\n{% for device in [\"primary\", \"secondary\"] %}\n  {{ device }}_interface_monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: {{ device }}_interface_metric_monitor}\n  {{ device }}_interface_monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [{{ device }}_interface_metric_monitor, link]}\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_router_id": "Osecondary:bgp_router_id", 
            "secondary_device_physical_interface": "Fvpn_gateway+vpn_gw_id:ha_interface+uplink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "primary_peer_ip": "Oprimary:bgp_peer_ip", 
            "primary_device_logical_interface": "Fvpn_gateway+vpn_gw_id:primary_logical_uplink_interface_name", 
            "primary_device_password": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "gohan_id": "Pid", 
            "bgp_group_name": "CCloudGW1", 
            "remote_as": "Pbgp_remote_as", 
            "jinja_primary_uplink_ip": "Oprimary:ip_address", 
            "primary_device_ip": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "secondary_ebgp_config_group": "Fvpn_gateway+vpn_gw_id:vpn_service+vpn_service_id:secondary_ebgp_config_group", 
            "version": "Vauto_filled", 
            "secondary_device_username": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "secondary_device_logical_interface": "Fvpn_gateway+vpn_gw_id:secondary_logical_uplink_interface_name", 
            "local_as": "Fvpn_gateway+vpn_gw_id:local_as_number", 
            "primary_device_physical_interface": "Fvpn_gateway+vpn_gw_id:ha_interface+uplink_interface_id:er_physical_interface+primary_interface_id:name", 
            "uplink_vlan": "Fvpn_gateway+vpn_gw_id:uplink_vlan_id", 
            "md5": "Pbgp_md5", 
            "secondary_peer_ip": "Osecondary:bgp_peer_ip", 
            "primary_router_id": "Oprimary:bgp_router_id", 
            "primary_ebgp_config_group": "Fvpn_gateway+vpn_gw_id:vpn_service+vpn_service_id:primary_ebgp_config_group", 
            "tenant_id": "Ptenant_id", 
            "jinja_secondary_uplink_ip": "Osecondary:ip_address", 
            "secondary_device_port": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "secondary_device_password": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "heat_timeout": "C60", 
            "vrf_name": "Fvpn_gateway+vpn_gw_id:vrf_name", 
            "primary_device_username": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "primary_device_port": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Fvpn_gateway+vpn_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,523:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,524:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,524:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,525:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,526:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,534:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/qos_option_aws],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "qos_option_aws", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  QoS Option\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  incoming_policer_name:\n    description: Name of created incoming policer\n    label: Incoming policer name\n    type: string\n  incoming_policer_config:\n    description: Configuration of incoming policer\n    label: Incoming policer config\n    type: string\n  outgoing_policer_name:\n    description: Name of created outgoing policer\n    label: Outgoing policer name\n    type: string\n  outgoing_policer_config:\n    description: Configuration of outgoing policer\n    label: Outgoing policer config\n    type: string\n  neighbour_prefix:\n    description: Name of prefix list used to specify traffic source/destination\n    label: Neighbour prefix\n    type: string\nresources:\n{% set forewarding_class = be_forwarding_class if qos_type == \"besteffort\" else ga_forwarding_class %}\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      lock_timeout: 3000\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      configs:\n      - config:\n          { get_param: incoming_policer_config }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: three-color-policer\n            name: { get_param: incoming_policer_name }\n      - config:\n          { get_param: outgoing_policer_config }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: policer\n            name: { get_param: outgoing_policer_name }\n      - config:\n          str_replace:\n            params:\n              $PREFIX:\n                get_param: neighbour_prefix\n              $CLASS:\n                {% if jinja_type == \"besteffort\" %} {{ jinja_be_forwarding_class }} {% else %} {{ jinja_ga_forwarding_class }} {% endif %}\n              $POLICER_NAME:\n                get_param: incoming_policer_name\n            template: |\n               interface-specific;\n               term bgp-accept {\n                   from {\n                       source-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol tcp;\n                       port bgp;\n                   }\n                   then accept;\n               }\n               term vrrp-accept {\n                   from {\n                       source-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol vrrp;\n                   }\n                   then policer 10K-RE;\n                   then accept;\n               }\n               term qos {\n                   then {\n                       three-color-policer {\n                           {% if jinja_type == \"besteffort\" %}two-rate{% else %}single-rate{% endif %} $POLICER_NAME;\n                       }\n                       forwarding-class $CLASS;\n                       accept;\n                   }\n               }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: filter\n            name:\n              str_replace:\n                params:\n                  $NAME:\n                    get_param: incoming_policer_name\n                template: |\n                  FILTER_$NAME\n      - config:\n          str_replace:\n            params:\n              $PREFIX:\n                get_param: neighbour_prefix\n              $POLICER_NAME:\n                get_param: outgoing_policer_name\n            template: |\n               interface-specific;\n               term bgp-accept {\n                   from {\n                       destination-prefix-list {\n                           $PREFIX;\n                       }\n                       protocol tcp;\n                       port bgp;\n                   }\n                   then accept;\n               }\n               term vrrp-accept {\n                   from {\n                       protocol vrrp;\n                   }\n                   then accept;\n               }\n               term policer {\n                   then {\n                       policer $POLICER_NAME;\n                       accept;\n                   }\n               }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: firewall\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: filter\n            name:\n              str_replace:\n                params:\n                  $NAME:\n                    get_param: outgoing_policer_name\n                template: |\n                  FILTER_$NAME\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": "Fha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "jinja_be_forwarding_class": "Faws_service+aws_service_id:be_forwarding_class", 
            "primary_device_password": "Fha_router+ha_router_id:edge_router+primary_router_id:password", 
            "jinja_ga_forwarding_class": "Faws_service+aws_service_id:ga_forwarding_class", 
            "incoming_policer_name": "Pincoming_policer_name", 
            "jinja_type": "Pqos_type", 
            "secondary_device_port": "Fha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_device_ip": "Fha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "heat_timeout": "C60", 
            "outgoing_policer_config": "Poutgoing_policer_config", 
            "incoming_policer_config": "Pincoming_policer_config", 
            "outgoing_policer_name": "Poutgoing_policer_name", 
            "neighbour_prefix": "Faws_service+aws_service_id:neighbour_prefix", 
            "secondary_device_username": "Fha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_port": "Fha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Fha_router+ha_router_id:edge_router+secondary_router_id:ip", 
            "primary_device_username": "Fha_router+ha_router_id:edge_router+primary_router_id:login"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,535:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,535:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,536:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,536:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,538:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,547:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/aws_gateway],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "aws_gateway", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  AWS Gateway\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_logical_downlink_interface:\n    description: Name of the created logical downlink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  primary_device_physical_downlink_interface:\n    description: Physical port on the Primary device on which the logical downlink port will be configured\n    label: Underlying physical interface\n    type: string\n  primary_device_logical_uplink_interface:\n    description: Name of the created logical uplink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  primary_device_physical_uplink_interface:\n    description: Physical port on the Primary device on which the logical uplink port will be configured\n    label: Underlying physical interface\n    type: string\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_logical_downlink_interface:\n    description: Name of the created logical downlink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  secondary_device_physical_downlink_interface:\n    description: Physical port on the Secondary device on which the logical downlink port will be configured\n    label: Underlying physical interface\n    type: string\n  secondary_device_logical_uplink_interface:\n    description: Name of the created logical uplink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  secondary_device_physical_uplink_interface:\n    description: Physical port on the Secondary device on which the logical uplink port will be configured\n    label: Underlying physical interface\n    type: string\n  downlink_vlan:\n    description: vlan tag used by logical downlink interface\n    label: VLAN ID\n    type: string\n  uplink_vlan:\n    description: vlan tag used by logical uplink interface\n    label: VLAN ID\n    type: string\n  vrf_name:\n    description: Name for VRF used by logical interfaces\n    label: VRF name\n    type: string\n  input_filter_name:\n    description: Name for policer used for input\n    label: Input filter name\n    type: string\n  output_filter_name:\n    description: Name for policer used for output\n    label: Output filter name\n    type: string\n  primary_downlink_vrrp_config_group:\n    description: Name for apply group to use for downlink interface for VRRP\n    label: Apply group name\n    type: string\n  secondary_downlink_vrrp_config_group:\n    description: Name for apply group to use for downlink interface for VRRP\n    label: Apply group name\n    type: string\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      lock_timeout: 3000\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      on_update: merge\n      configs:\n      - config:\n          str_replace:\n            params:\n              $VLAN:\n                get_param: downlink_vlan\n              $INPUT_FILTER:\n                get_param: input_filter_name\n              $OUTPUT_FILTER:\n                get_param: output_filter_name\n              $APPLY_GROUP:\n                get_param: {{ device }}_downlink_vrrp_config_group\n            template: |\n              apply-groups $APPLY_GROUP;\n              vlan-id $VLAN;\n              description AWS_Downlink;\n              family inet {\n                  filter {\n                      input $INPUT_FILTER;\n                      output $OUTPUT_FILTER;\n                  }\n              }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_downlink_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: downlink_vlan }\n      - config:\n          str_replace:\n            params:\n              $LIFD:\n                get_param: {{ device }}_device_logical_downlink_interface\n              $LIFU:\n                get_param: {{ device }}_device_logical_uplink_interface\n            template: |\n                instance-type virtual-router;\n                interface $LIFD;\n                interface $LIFU;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n      - config:\n          str_replace:\n            params:\n              $VLAN:\n                get_param: uplink_vlan\n            template: |\n              vlan-id $VLAN;\n              description AWS_Uplink;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_uplink_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: uplink_vlan }\n{% endfor %}\n", 
        "parameter_mappings": {
            "primary_device_logical_uplink_interface": "Pprimary_logical_uplink_interface_name", 
            "primary_device_logical_downlink_interface": "Pprimary_logical_downlink_interface_name", 
            "primary_device_password": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "output_filter_name": "ACFILTER_&Fqos_option+qos_option_id:outgoing_policer_name", 
            "primary_device_ip": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "secondary_device_physical_downlink_interface": "Fha_interface+downlink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "secondary_device_username": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_physical_uplink_interface": "Fha_interface+uplink_interface_id:er_physical_interface+primary_interface_id:name", 
            "secondary_device_logical_uplink_interface": "Psecondary_logical_uplink_interface_name", 
            "downlink_vlan": "Pdownlink_vlan_id", 
            "secondary_device_logical_downlink_interface": "Psecondary_logical_downlink_interface_name", 
            "input_filter_name": "ACFILTER_&Fqos_option+qos_option_id:incoming_policer_name", 
            "uplink_vlan": "Puplink_vlan_id", 
            "secondary_device_port": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_downlink_vrrp_config_group": "Faws_service+aws_service_id:primary_downlink_vrrp_config_group", 
            "secondary_device_password": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "heat_timeout": "C60", 
            "vrf_name": "Pvrf_name", 
            "primary_device_username": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "primary_device_physical_downlink_interface": "Fha_interface+downlink_interface_id:er_physical_interface+primary_interface_id:name", 
            "secondary_downlink_vrrp_config_group": "Faws_service+aws_service_id:secondary_downlink_vrrp_config_group", 
            "primary_device_port": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_physical_uplink_interface": "Fha_interface+uplink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "secondary_device_ip": "Fha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,547:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,548:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,548:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,549:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,550:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,557:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/gw_interface_aws],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "gw_interface_aws", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Inet Address\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  downlink_vlan_id:\n    description: Vlan tag for mx logical downlink interface\n    label: Vlan Tag\n    type: string\n  gw_vip:\n    description: Virtual IP configured on VRRP\n    label: Inet Address CIDR\n    type: string\n  primary_device_gw_ip:\n    description: IP on primary device\n    label: Inet Address CIDR\n    type: string\n  secondary_device_gw_ip:\n    description: IP on secondary device\n    label: Inet Address CIDR\n    type: string\n  netmask:\n    description: Netmask for gw_ip\n    label: Netmask\n    type: number\n  vrrp_group:\n    type: string\n    label: VRRP Group\n  primary_device_priority:\n    type: string\n    label: Primary device priority\n  secondary_device_priority:\n    type: string\n    label: Secondary device priority\n  vrf_name:\n    type: string\n    label: VRF\n  bgp_group_name:\n    type: string\n    label: Name of BGP Group on VRF\n  local_as:\n    type: string\n    label: Local AS Number\n  primary_ibgp_config_group:\n    description: Name for apply group to use for downlink interface\n    label: Apply group name\n    type: string\n  secondary_ibgp_config_group:\n    description: Name for apply group to use for downlink interface\n    label: Apply group name\n    type: string\n  primary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  secondary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the GW Interface\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      lock_timeout: 3000\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      configs:\n      - config:\n          str_replace:\n            params:\n              $VRRP_GROUP:\n                    get_param: vrrp_group\n              $PRIORITY:\n                    get_param: {{ device }}_device_priority\n              $VIP:\n                    get_param: gw_vip\n            template: |\n                vrrp-group $VRRP_GROUP {\n                    virtual-address $VIP;\n                    priority $PRIORITY;\n                }\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: downlink_vlan_id }\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: address\n            name:\n              str_replace:\n                params:\n                  $DEVICE_IP:\n                    get_param: {{ device }}_device_gw_ip\n                  $NETMASK:\n                    get_param: netmask\n                template: |\n                  $DEVICE_IP/$NETMASK\n      - config:\n          str_replace:\n            params:\n              $DEVICE_GW_IP:\n                    get_param: {{ device }}_device_gw_ip\n              $NEIGHBOR_GW_IP:\n                    get_param: {% if device == \"secondary\" %}primary{% else %}secondary{% endif %}_device_gw_ip\n              $LOCAL_AS:\n                    get_param: local_as\n              $APPLY_GROUP:\n                    get_param: {{ device }}_ibgp_config_group\n            template: |\n              apply-groups $APPLY_GROUP;\n              local-address $DEVICE_GW_IP;\n              peer-as $LOCAL_AS;\n              neighbor $NEIGHBOR_GW_IP;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: protocols\n          - config_type: tag\n            xml_type: tag\n            tag: bgp\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: group\n            name: { get_param: bgp_group_name }\n{% endfor %}\n\n  vrrp_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: vrrp_pool\n      resource_type: gw_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: status\n      properties:\n        vrid:\n          - { get_param: vrrp_group }\n        primary:\n          host: { get_param: primary_device_ip }\n          port: { get_param: primary_device_port }\n          login: { get_param: primary_device_username }\n          password: { get_param: primary_device_password }\n          interface: { get_param: primary_logical_interface_name }\n        secondary:\n          host: { get_param: secondary_device_ip }\n          port: { get_param: secondary_device_port }\n          login: { get_param: secondary_device_username }\n          password: { get_param: secondary_device_password }\n          interface: { get_param: secondary_logical_interface_name }\n      syncer_properties:\n        etcd:\n          status:\n            key: status\n          hold_options:\n            positive_status:\n              primary: MASTER\n              secondary: BACKUP\n            time_seconds: 360\n    depends_on: netconf_configure_secondary\n\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: vrrp_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [vrrp_monitor, link]}\n", 
        "parameter_mappings": {
            "secondary_device_physical_interface": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "secondary_ibgp_config_group": "Faws_gateway+aws_gw_id:aws_service+aws_service_id:secondary_ibgp_config_group", 
            "primary_device_password": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "secondary_device_gw_ip": "Psecondary_ipv4", 
            "gohan_id": "Pid", 
            "bgp_group_name": "Cinet-gw-group", 
            "gw_vip": "Pgw_vipv4", 
            "primary_device_ip": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "version": "Vauto_filled", 
            "secondary_device_username": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "primary_device_username": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "downlink_vlan_id": "Faws_gateway+aws_gw_id:downlink_vlan_id", 
            "secondary_logical_interface_name": "Faws_gateway+aws_gw_id:secondary_logical_downlink_interface_name", 
            "primary_logical_interface_name": "Faws_gateway+aws_gw_id:primary_logical_downlink_interface_name", 
            "local_as": "Faws_gateway+aws_gw_id:local_as_number", 
            "primary_device_physical_interface": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:er_physical_interface+primary_interface_id:name", 
            "netmask": "Pnetmask", 
            "primary_device_gw_ip": "Pprimary_ipv4", 
            "vrrp_group": "Pvrid", 
            "primary_device_priority": "C105", 
            "jinja_force_dependency": "Faws_gateway+aws_gw_id:aws_interface+connected_aws_interface:id", 
            "tenant_id": "Ptenant_id", 
            "secondary_device_port": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "secondary_device_password": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "heat_timeout": "C60", 
            "vrf_name": "Faws_gateway+aws_gw_id:vrf_name", 
            "jinja_force_dependency2": {
                "field": "id", 
                "path": [
                    {
                        "type": "network", 
                        "id": "network_id"
                    }
                ]
            }, 
            "secondary_device_priority": "C100", 
            "primary_ibgp_config_group": "Faws_gateway+aws_gw_id:aws_service+aws_service_id:primary_ibgp_config_group", 
            "primary_device_port": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,558:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,558:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,559:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,559:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,561:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,568:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/static_route_aws],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "static_route_aws", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  AWS Gateway Static Route\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  vrf_name:\n    description: Name of VRF to add this static route\n    label: VRF\n    type: string\n  route:\n    description: Static Route definition\n    label: Route\n    type: string\n  next_hop:\n    description: Next hop for the static route\n    label: Next hop\n    type: string\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      lock_timeout: 3000\n      configs:\n      - config:\n          str_replace:\n            params:\n              $NEXT_HOP:\n                get_param: next_hop\n            template: |\n              next-hop $NEXT_HOP;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: routing-options\n          - config_type: tag\n            xml_type: tag\n            tag: static\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: route\n            name: { get_param: route }\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "route": "Pdestination", 
            "primary_device_password": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "secondary_device_port": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "primary_device_ip": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "heat_timeout": "C60", 
            "next_hop": "Pnexthop", 
            "vrf_name": "Faws_gateway+aws_gw_id:vrf_name", 
            "primary_device_username": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "primary_device_port": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip", 
            "secondary_device_username": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,568:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,569:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,569:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,570:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,572:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,578:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/aws_interface],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "aws_interface", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Inet Address\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  primary_device_logical_interface:\n    description: Name of the created logical uplink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  secondary_device_logical_interface:\n    description: Name of the created logical uplink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  vrf_name:\n    description: Name of VRF (routing-instance) in MX config\n    label: VRF Name\n    type: string\n  local_as:\n    type: number\n    label: Local AS Number\n  primary_ebgp_config_group:\n    description: Name of MX config group for eBGP config\n    label: eBGP config group\n    type: string\n  secondary_ebgp_config_group:\n    description: Name of MX config group for eBGP config\n    label: eBGP config group\n    type: string\n  uplink_vlan:\n    description: VLAN ID used on uplink interfaces (same for both primary and secondary device)\n    label: Uplink VLAN ID\n    type: string\n  primary_peer_ip:\n    description: IP address of primary router eBGP neighbour\n    label: Primary device BGP peer\n    type: string\n  secondary_peer_ip:\n    description: IP address of secondary router eBGP neighbour\n    label: Secondary device BGP peer\n    type: string\n  primary_router_id:\n    description: Primary router VRF router id\n    label: Primary router id\n    type: string\n  secondary_router_id:\n    description: Secondary router VRF router id\n    label: Secondary router id\n    type: string\n  remote_as:\n    description: eBGP remote autonomous system\n    label: Remote AS\n    type: string\n  md5:\n    description: eBGP authentication key\n    label: eBGP authentication key\n    type: string\n  bgp_group_name:\n    description: Name of eBGP group\n    label: eBGP group name\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the AWS Interface\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n{% set primary_ip_uplink_split = jinja_primary_uplink_ip.split('/') %}\n{% set secondary_ip_uplink_split = jinja_secondary_uplink_ip.split('/') %}\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      lock_timeout: 3000\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      configs:\n      - config: \"\"\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: { get_param: uplink_vlan }\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: address\n            name: {% if device == \"primary\" %} {{ jinja_primary_uplink_ip }} {% else %} {{ jinja_secondary_uplink_ip }} {% endif %}\n      - config:\n          str_replace:\n            params:\n              $NEIGHBOR_IP:\n                    get_param: {{ device }}_peer_ip\n              $REMOTE_AS:\n                    get_param: remote_as\n              $APPLY_GROUP:\n                    get_param: {{ device }}_ebgp_config_group\n              $KEY:\n                    get_param: md5\n            template: |\n              apply-groups $APPLY_GROUP;\n              local-address {% if device == \"primary\" %} {{ primary_ip_uplink_split[0] }} {% else %} {{ secondary_ip_uplink_split[0] }} {% endif %};\n              peer-as $REMOTE_AS;\n              neighbor $NEIGHBOR_IP authentication-key $KEY;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: protocols\n          - config_type: tag\n            xml_type: tag\n            tag: bgp\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: group\n            name: { get_param: bgp_group_name }\n      - config:\n          str_replace:\n            params:\n              $ROUTER_ID:\n                    get_param: {{device}}_router_id\n              $LOCAL_AS:\n                    get_param: local_as\n            template: |\n              router-id $ROUTER_ID;\n              autonomous-system $LOCAL_AS;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: routing-options\n{% endfor %}\n\n  bgp_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: bgp_pool\n      resource_type: aws_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: status\n      properties:\n        instance: { get_param: vrf_name }\n        primary:\n          host: { get_param: primary_device_ip }\n          port: { get_param: primary_device_port }\n          login: { get_param: primary_device_username }\n          password: { get_param: primary_device_password }\n          peer_address: { get_param: primary_peer_ip }\n        secondary:\n          host: { get_param: secondary_device_ip }\n          port: { get_param: secondary_device_port }\n          login: { get_param: secondary_device_username }\n          password: { get_param: secondary_device_password }\n          peer_address: { get_param: secondary_peer_ip }\n      syncer_properties:\n        etcd:\n          status:\n            key: status\n    depends_on: netconf_configure_secondary\n\n{% for device in [\"primary\", \"secondary\"] %}\n  {{ device }}_interface_metric_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_ports_metric\n      resource_type: aws_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: {{ device }}_router\n      properties:\n        device_ip: { get_param: {{ device }}_device_ip }\n        if_name: { get_param: {{ device }}_device_logical_interface }\n        community_name: EDGE_ROUTER_COMMUNITY\n      syncer_properties:\n        tsdb:\n          traffic.in:\n            metric: traffic.bytes\n            tags:\n              device_index: {{ device }}\n              resource_id: { get_param: gohan_id }\n              direction: in\n          traffic.out:\n            metric: traffic.bytes\n            tags:\n              device_index: {{ device }}\n              resource_id: { get_param: gohan_id }\n              direction: out\n    depends_on: bgp_monitor\n{% endfor %}\n\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: bgp_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [bgp_monitor, link]}\n{% for device in [\"primary\", \"secondary\"] %}\n  {{ device }}_interface_monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: {{ device }}_interface_metric_monitor}\n  {{ device }}_interface_monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [{{ device }}_interface_metric_monitor, link]}\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_router_id": "Osecondary:bgp_router_id", 
            "secondary_device_physical_interface": "Faws_gateway+aws_gw_id:ha_interface+uplink_interface_id:er_physical_interface+secondary_interface_id:name", 
            "primary_peer_ip": "Oprimary:bgp_peer_ip", 
            "primary_device_logical_interface": "Faws_gateway+aws_gw_id:primary_logical_uplink_interface_name", 
            "primary_device_password": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:password", 
            "gohan_id": "Pid", 
            "bgp_group_name": "CAWS-PE", 
            "remote_as": "Pbgp_remote_as", 
            "jinja_primary_uplink_ip": "Oprimary:ip_address", 
            "primary_device_ip": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ip", 
            "secondary_ebgp_config_group": "Faws_gateway+aws_gw_id:aws_service+aws_service_id:secondary_ebgp_config_group", 
            "version": "Vauto_filled", 
            "secondary_device_username": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:login", 
            "secondary_device_logical_interface": "Faws_gateway+aws_gw_id:secondary_logical_uplink_interface_name", 
            "local_as": "Faws_gateway+aws_gw_id:local_as_number", 
            "primary_device_physical_interface": "Faws_gateway+aws_gw_id:ha_interface+uplink_interface_id:er_physical_interface+primary_interface_id:name", 
            "uplink_vlan": "Faws_gateway+aws_gw_id:uplink_vlan_id", 
            "md5": "Pbgp_md5", 
            "secondary_peer_ip": "Osecondary:bgp_peer_ip", 
            "primary_router_id": "Oprimary:bgp_router_id", 
            "primary_ebgp_config_group": "Faws_gateway+aws_gw_id:aws_service+aws_service_id:primary_ebgp_config_group", 
            "tenant_id": "Ptenant_id", 
            "jinja_secondary_uplink_ip": "Osecondary:ip_address", 
            "secondary_device_port": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ssh_port", 
            "secondary_device_password": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:password", 
            "heat_timeout": "C60", 
            "vrf_name": "Faws_gateway+aws_gw_id:vrf_name", 
            "primary_device_username": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:login", 
            "primary_device_port": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+primary_router_id:ssh_port", 
            "secondary_device_ip": "Faws_gateway+aws_gw_id:ha_interface+downlink_interface_id:ha_router+ha_router_id:edge_router+secondary_router_id:ip"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,578:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,582:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,583:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,583:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,585:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,596:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/common_function_gateway],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "common_function_gateway", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Common Function Gateway\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_logical_downlink_interface:\n    description: Name of the created logical downlink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  primary_device_physical_downlink_interface:\n    description: Physical port on the Primary device on which the logical downlink port will be configured\n    label: Underlying physical interface\n    type: string\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_logical_downlink_interface:\n    description: Name of the created logical downlink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  secondary_device_physical_downlink_interface:\n    description: Physical port on the Secondary device on which the logical downlink port will be configured\n    label: Underlying physical interface\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the Common Function Gateway\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config: |\n          nat-rules {{ jinja_vrf_name }}-SNAPT;\n          nat-rules {{ jinja_vrf_name }}-DNAT;\n          interface-service service-interface {{ jinja_service_interface_name }}.{{ jinja_vlan_id }};\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: services\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: service-set\n            name: {{ jinja_vrf_name }}\n      - config: |\n          apply-groups {{ jinja_snapt_pool_group_name }};\n          address {{ jinja_nat_ip }}/32;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: services\n          - config_type: tag\n            xml_type: tag\n            tag: nat\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: pool\n            name: {{ jinja_vrf_name }}-SNAPT-POOL\n      - config: |\n          apply-groups {{ jinja_snapt_group_name }};\n          term source then translated source-pool {{ jinja_vrf_name }}-SNAPT-POOL;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: services\n          - config_type: tag\n            xml_type: tag\n            tag: nat\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: rule\n            name: {{ jinja_vrf_name }}-SNAPT\n      {% for service_number in jinja_common_service_numbers %}\n      - config: |\n          apply-groups {{ jinja_dnat_pool_group_name }}-{{ service_number }};\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: services\n          - config_type: tag\n            xml_type: tag\n            tag: nat\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: pool\n            name: {{ jinja_vrf_name }}-{{ jinja_dnat_pool_group_name }}-{{ service_number }}\n      {% endfor %}\n      - config: |\n          apply-groups {{ jinja_dnat_group_name }};\n          {% for service_number in jinja_common_service_numbers %}\n          term {{ service_number }} then translated destination-pool {{ jinja_vrf_name }}-{{ jinja_dnat_pool_group_name }}-{{ service_number }};\n          {% endfor %}\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: services\n          - config_type: tag\n            xml_type: tag\n            tag: nat\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: rule\n            name: {{ jinja_vrf_name }}-DNAT\n      - config: |\n          peer-unit {{ jinja_logical_tunnel_unit_service }};\n          family inet service input service-set {{ jinja_vrf_name }};\n          family inet service output service-set {{ jinja_vrf_name }};\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: {{ jinja_logical_tunnel_interface_name }}\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: {{ jinja_logical_tunnel_unit_user }}\n      - config: |\n          peer-unit {{ jinja_logical_tunnel_unit_user }};\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: {{ jinja_logical_tunnel_interface_name }}\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: {{ jinja_logical_tunnel_unit_service }}\n      - config: |\n          family inet;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: {{ jinja_service_interface_name }}\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: {{ jinja_vlan_id }}\n      - config: |\n          apply-groups {{ jinja_vrrp_group_name }};\n          description {{ jinja_vrf_name }};\n          vlan-id {{ jinja_vlan_id }};\n          family inet service input service-set {{ jinja_vrf_name }};\n          family inet service output service-set {{ jinja_vrf_name }};\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: { get_param: {{ device }}_device_physical_downlink_interface }\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: {{ jinja_vlan_id }}\n      - config: \"\"\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: {{ jinja_service_vrf_name }}\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: interface\n            name: {{ jinja_logical_tunnel_interface_name }}.{{ jinja_logical_tunnel_unit_service }}\n      - config:\n          next-hop {{ jinja_logical_tunnel_interface_name }}.{{ jinja_logical_tunnel_unit_service }};\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: {{ jinja_service_vrf_name }}\n          - config_type: tag\n            xml_type: tag\n            tag: routing-options\n          - config_type: tag\n            xml_type: tag\n            tag: static\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: route\n            name: {{ jinja_nat_ip }}/32\n      - config:\n          str_replace:\n            params:\n              $DOWNLINK_INTERFACE:\n                get_param: {{ device }}_device_logical_downlink_interface\n            template: |\n              instance-type virtual-router;\n              interface {{ jinja_logical_tunnel_interface_name }}.{{ jinja_logical_tunnel_unit_user}};\n              interface {{ jinja_service_interface_name}}.{{ jinja_vlan_id }};\n              interface $DOWNLINK_INTERFACE;\n              routing-options static route 0.0.0.0/0 next-hop {{ jinja_logical_tunnel_interface_name }}.{{ jinja_logical_tunnel_unit_user }};\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: {{ jinja_vrf_name }}\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n\n  vrrp_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: vrrp_pool\n      resource_type: common_function_gateways\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: status\n      properties:\n        vrid:\n        {% for vrid in jinja_vrids %}\n          - {{ vrid }}\n        {% endfor %}\n        primary:\n          host: { get_param: primary_device_ip }\n          port: { get_param: primary_device_port }\n          login: { get_param: primary_device_username }\n          password: { get_param: primary_device_password }\n          interface: { get_param: primary_device_logical_downlink_interface }\n        secondary:\n          host: { get_param: secondary_device_ip }\n          port: { get_param: secondary_device_port }\n          login: { get_param: secondary_device_username }\n          password: { get_param: secondary_device_password }\n          interface: { get_param: secondary_device_logical_downlink_interface }\n      syncer_properties:\n        etcd:\n          status:\n            key: status\n          hold_options:\n            positive_status:\n              primary_vrid1: MASTER\n              secondary_vrid1: BACKUP\n              primary_vrid2: MASTER\n              secondary_vrid2: BACKUP\n            time_seconds: 360\n    depends_on: netconf_configure_secondary\n\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: vrrp_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [vrrp_monitor, link]}\n", 
        "parameter_mappings": {
            "jinja_vrids": {
                "for_mapping": {
                    "field": "vrid"
                }, 
                "for_field": {
                    "field": "vrrp_config", 
                    "path": [
                        "common_function_pool_id"
                    ]
                }
            }, 
            "primary_device_logical_downlink_interface": {
                "field": "primary_logical_interface_name"
            }, 
            "jinja_common_service_numbers": {
                "for_mapping": {
                    "field": "common_function_number", 
                    "path": [
                        {
                            "type": "common_function", 
                            "id": "common_function_id"
                        }
                    ]
                }, 
                "for_field": "common_functions"
            }, 
            "jinja_vlan_id": {
                "field": "vlan_id"
            }, 
            "primary_device_password": {
                "field": "password", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "gohan_id": {
                "field": "id"
            }, 
            "jinja_service_vrf_name": {
                "field": "service_vrf_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "jinja_dnat_group_name": {
                "field": "dnat_group_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "heat_timeout": "C60", 
            "primary_device_ip": {
                "field": "ip", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "jinja_logical_tunnel_unit_user": {
                "field": "logical_tunnel_unit_user"
            }, 
            "version": {
                "version": "auto_filled"
            }, 
            "secondary_device_logical_downlink_interface": {
                "field": "secondary_logical_interface_name"
            }, 
            "secondary_device_physical_downlink_interface": {
                "field": "name", 
                "path": [
                    "downlink_interface_id", 
                    "secondary_interface_id"
                ]
            }, 
            "secondary_device_username": {
                "field": "login", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "jinja_dnat_pool_group_name": {
                "field": "dnat_pool_group_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "jinja_nat_ip": {
                "field": "nat_ip"
            }, 
            "jinja_dummy_dependency": {
                "field": "id", 
                "path": [
                    {
                        "type": "subnet", 
                        "id": "subnet_id"
                    }
                ], 
                "ignore_missing": true
            }, 
            "jinja_vrf_name": {
                "field": "vrf_name"
            }, 
            "jinja_vrrp_group_name": {
                "field": "vrrp_group_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "jinja_snapt_group_name": {
                "field": "snapt_group_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "jinja_logical_tunnel_interface_name": {
                "field": "logical_tunnel_interface_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "tenant_id": {
                "field": "tenant_id"
            }, 
            "secondary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "jinja_logical_tunnel_unit_service": {
                "field": "logical_tunnel_unit_service"
            }, 
            "secondary_device_password": {
                "field": "password", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "jinja_service_interface_name": {
                "field": "service_interface_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "primary_device_username": {
                "field": "login", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "primary_device_physical_downlink_interface": {
                "field": "name", 
                "path": [
                    "downlink_interface_id", 
                    "primary_interface_id"
                ]
            }, 
            "jinja_snapt_pool_group_name": {
                "field": "snapt_pool_group_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "primary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_ip": {
                "field": "ip", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,597:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,597:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,598:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,599:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,600:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,611:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/common_function],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "common_function", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Common Function\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_vrrp_ip:\n    description: Local ip in VRRP group on primary device.\n    label: Primary VRRP ip.\n    type: string\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_vrrp_ip:\n    description: Local ip in VRRP group on secondary device.\n    label: Secondary VRRP ip.\n    type: string\n  netmask:\n    description: Netmask used in link local network.\n    label: Link-local netmask.\n    type: string\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    properties:\n      lock_timeout: 3000\n      configs:\n      - config: \"\"\n        path:\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: groups\n            name: {{ jinja_vrrp_group_name }}\n          - config_type: tag\n            xml_type: tag\n            tag: interfaces\n          - config_type: name\n            xml_type: named_tag\n            tag: interface\n            name: <*>\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: unit\n            name: <*>\n          - config_type: tag\n            xml_type: tag\n            tag: family\n          - config_type: tag\n            xml_type: tag\n            tag: inet\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: address\n            name:\n              str_replace:\n                params:\n                  $VIP:\n                    get_param: {{ device }}_vrrp_ip\n                  $NETMASK:\n                    get_param: netmask\n                template: |\n                  $VIP/$NETMASK\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: vrrp-group\n            name: {{ jinja_vrid }}\n          - config_type: named_tag\n            xml_type: named_tag # FIXME: this is probably not true, as far as i can see we don't support that in plugin at all :(\n            tag: virtual-address\n            name: {{ jinja_link_local_ip_address }}\n      - config: |\n          from {\n            destination-address {\n              {{ jinja_link_local_ip_address }}/32;\n            }\n          }\n          then {\n            translated {\n              translation-type {\n                dnat-44;\n              }\n            }\n          }\n        path:\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: groups\n            name: {{ jinja_dnat_group_name }}\n          - config_type: tag\n            xml_type: tag\n            tag: services\n          - config_type: tag\n            xml_type: tag\n            tag: nat\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: rule\n            name: <*>\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: term\n            name: {{ jinja_service_number }}\n      - config: |\n          services {\n            nat {\n              pool <*> {\n                address {{ jinja_shared_ip_address }}/32;\n              }\n            }\n          }\n        path:\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: groups\n            name: {{ jinja_dnat_pool_group_name }}-{{ jinja_service_number }}\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n{% endfor %}\n", 
        "parameter_mappings": {
            "jinja_dnat_pool_group_name": {
                "field": "dnat_pool_group_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "primary_vrrp_ip": {
                "field": "primary_vrrp_ip"
            }, 
            "jinja_dnat_group_name": {
                "field": "dnat_group_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "secondary_vrrp_ip": {
                "field": "secondary_vrrp_ip"
            }, 
            "secondary_device_ip": {
                "field": "ip", 
                "path": [
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "primary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "netmask": {
                "field": "link_local_netmask", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "jinja_shared_ip_address": {
                "field": "shared_ip_address"
            }, 
            "primary_device_ip": {
                "field": "ip", 
                "path": [
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_password": {
                "field": "password", 
                "path": [
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "heat_timeout": "C60", 
            "primary_device_username": {
                "field": "login", 
                "path": [
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "primary_device_password": {
                "field": "password", 
                "path": [
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "jinja_service_number": {
                "field": "common_function_number"
            }, 
            "secondary_device_username": {
                "field": "login", 
                "path": [
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "jinja_vrrp_group_name": {
                "field": "vrrp_group_name", 
                "path": [
                    "common_function_pool_id"
                ]
            }, 
            "secondary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "jinja_vrid": {
                "field": "vrid"
            }, 
            "jinja_link_local_ip_address": {
                "field": "link_local_ip_address"
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,612:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,613:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,613:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,614:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,616:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,620:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/qos_option_interdc],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "qos_option_interdc", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  QoS Option\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  incoming_policer_name:\n    description: Name of created incoming policer\n    label: Incoming policer name\n    type: string\n  incoming_policer_config:\n    description: Configuration of incoming policer\n    label: Incoming policer config\n    type: string\n  outgoing_policer_name:\n    description: Name of created outgoing policer\n    label: Outgoing policer name\n    type: string\n  outgoing_policer_config:\n    description: Configuration of outgoing policer\n    label: Outgoing policer config\n    type: string\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      lock_timeout: 3000\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      configs:\n      - config:\n          { get_param: incoming_policer_config }\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: firewall\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: three-color-policer\n          name: { get_param: incoming_policer_name }\n      - config:\n          { get_param: outgoing_policer_config }\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: firewall\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: policer\n          name: { get_param: outgoing_policer_name }\n      - config:\n          str_replace:\n            params:\n              $CLASS:\n              {% if jinja_type == \"besteffort\" %}\n                {{ jinja_be_forwarding_class }}\n              {% else %}\n                {{ jinja_ga_forwarding_class }}\n              {% endif %}\n              $POLICER_NAME:\n                get_param: incoming_policer_name\n            template: |\n              interface-specific;\n              term vrrp-accept {\n                from {\n                  protocol vrrp;\n                }\n                then policer 10K-RE;\n                then accept;\n              }\n              term qos {\n                then {\n                  three-color-policer {\n                    two-rate $POLICER_NAME;\n                  }\n                  forwarding-class $CLASS;\n                  accept;\n                }\n              }\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: firewall\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: filter\n          name:\n            str_replace:\n              params:\n                $NAME:\n                  get_param: incoming_policer_name\n              template: |\n                FILTER_$NAME\n      - config:\n          str_replace:\n            params:\n              $POLICER_NAME:\n                get_param: outgoing_policer_name\n            template: |\n              interface-specific;\n              term vrrp-accept {\n                from {\n                  protocol vrrp;\n                }\n                then accept;\n              }\n              term policer {\n                then {\n                  policer $POLICER_NAME;\n                  accept;\n                }\n              }\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: firewall\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: filter\n          name:\n            str_replace:\n              params:\n                $NAME:\n                  get_param: outgoing_policer_name\n              template: |\n                FILTER_$NAME\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": {
                "field": "password", 
                "path": [
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "jinja_be_forwarding_class": {
                "field": "be_forwarding_class", 
                "path": [
                    "interdc_service_id"
                ]
            }, 
            "primary_device_password": {
                "field": "password", 
                "path": [
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "jinja_ga_forwarding_class": {
                "field": "ga_forwarding_class", 
                "path": [
                    "interdc_service_id"
                ]
            }, 
            "incoming_policer_name": {
                "field": "incoming_policer_name"
            }, 
            "jinja_type": {
                "field": "qos_type"
            }, 
            "secondary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "primary_device_ip": {
                "field": "ip", 
                "path": [
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "heat_timeout": {
                "constant": 60
            }, 
            "outgoing_policer_config": {
                "field": "outgoing_policer_config"
            }, 
            "incoming_policer_config": {
                "field": "incoming_policer_config"
            }, 
            "outgoing_policer_name": {
                "field": "outgoing_policer_name"
            }, 
            "secondary_device_username": {
                "field": "login", 
                "path": [
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "primary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_ip": {
                "field": "ip", 
                "path": [
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "primary_device_username": {
                "field": "login", 
                "path": [
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,621:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,622:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,622:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,623:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,626:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,632:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/interdc_gateway],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "interdc_gateway", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Inter DC Gateway\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_downlink_interface:\n    description: Physical port on the Primary device on which the logical downlink port will be configured\n    label: Underlying physical interface\n    type: string\n  primary_device_logical_downlink_interface:\n    description: Name of the created logical downlink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  primary_device_physical_uplink_interface:\n    description: Physical port on the Primary device on which the logical uplink port will be configured\n    label: Underlying physical interface\n    type: string\n  primary_device_logical_uplink_interface:\n    description: Name of the created logical uplink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_physical_downlink_interface:\n    description: Physical port on the Secondary device on which the logical downlink port will be configured\n    label: Underlying physical interface\n    type: string\n  secondary_device_logical_downlink_interface:\n    description: Name of the created logical downlink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  secondary_device_physical_uplink_interface:\n    description: Physical port on the Secondary device on which the logical uplink port will be configured\n    label: Underlying physical interface\n    type: string\n  secondary_device_logical_uplink_interface:\n    description: Name of the created logical uplink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  input_filter_name:\n    description: Name for policer used for input\n    label: Input filter name\n    type: string\n  output_filter_name:\n    description: Name for policer used for output\n    label: Output filter name\n    type: string\n  downlink_vlan:\n    description: vlan tag used by logical downlink interface\n    label: VLAN ID\n    type: string\n  uplink_vlan_id:\n    description: vlan tag used by logical uplink interface\n    label: VLAN ID\n    type: string\n  vrf_name:\n    description: Name for VRF used by logical interfaces\n    label: VRF name\n    type: string\n  primary_downlink_vrrp_config_group:\n    description: Name for apply group to use for downlink interface for VRRP\n    label: Apply group name\n    type: string\n  primary_uplink_vrrp_config_group:\n    description: Name for apply group to use for uplink interface for VRRP\n    label: Apply group name\n    type: string\n  secondary_downlink_vrrp_config_group:\n    description: Name for apply group to use for downlink interface for VRRP\n    label: Apply group name\n    type: string\n  secondary_uplink_vrrp_config_group:\n    description: Name for apply group to use for uplink interface for VRRP\n    label: Apply group name\n    type: string\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      lock_timeout: 3000\n      on_update: merge\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      configs:\n      - config:\n          str_replace:\n            params:\n              $APPLY_GROUP:\n                get_param: {{ device }}_downlink_vrrp_config_group\n              $VLAN:\n                get_param: downlink_vlan\n              $INPUT_FILTER:\n                get_param: input_filter_name\n              $OUTPUT_FILTER:\n                get_param: output_filter_name\n            template: |\n              apply-groups $APPLY_GROUP;\n              description interdc_gw;\n              vlan-id $VLAN;\n              family inet {\n                filter {\n                  input FILTER_$INPUT_FILTER;\n                  output FILTER_$OUTPUT_FILTER;\n                }\n              }\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: interfaces\n        - config_type: name\n          xml_type: named_tag\n          tag: interface\n          name: { get_param: {{ device }}_device_physical_downlink_interface }\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: unit\n          name: { get_param: downlink_vlan }\n      - config:\n          str_replace:\n            params:\n              $LIFD:\n                get_param: {{ device }}_device_logical_downlink_interface\n              $LIFU:\n                get_param: {{ device }}_device_logical_uplink_interface\n            template: |\n                instance-type virtual-router;\n                interface $LIFD;\n                interface $LIFU;\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: routing-instances\n        - config_type: name\n          xml_type: named_tag\n          tag: instance\n          name: { get_param: vrf_name }\n      - config:\n          str_replace:\n            params:\n              $APPLY_GROUP:\n                get_param: {{ device }}_uplink_vrrp_config_group\n              $VLAN:\n                get_param: uplink_vlan_id\n            template: |\n              apply-groups $APPLY_GROUP;\n              description DC10GVDX;\n              vlan-id $VLAN;\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: interfaces\n        - config_type: name\n          xml_type: named_tag\n          tag: interface\n          name: { get_param: {{ device }}_device_physical_uplink_interface }\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: unit\n          name: { get_param: uplink_vlan_id }\n{% endfor %}\n", 
        "parameter_mappings": {
            "primary_device_logical_uplink_interface": {
                "field": "primary_logical_uplink_interface_name"
            }, 
            "primary_device_logical_downlink_interface": {
                "field": "primary_logical_downlink_interface_name"
            }, 
            "primary_device_password": {
                "field": "password", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "output_filter_name": {
                "field": "outgoing_policer_name", 
                "path": [
                    "qos_option_id"
                ]
            }, 
            "primary_device_ip": {
                "field": "ip", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_physical_downlink_interface": {
                "field": "name", 
                "path": [
                    "downlink_interface_id", 
                    "secondary_interface_id"
                ]
            }, 
            "secondary_device_username": {
                "field": "login", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "primary_device_physical_uplink_interface": {
                "field": "name", 
                "path": [
                    "uplink_interface_id", 
                    "primary_interface_id"
                ]
            }, 
            "secondary_device_logical_uplink_interface": {
                "field": "secondary_logical_uplink_interface_name"
            }, 
            "downlink_vlan": {
                "field": "downlink_vlan_id"
            }, 
            "secondary_device_logical_downlink_interface": {
                "field": "secondary_logical_downlink_interface_name"
            }, 
            "input_filter_name": {
                "field": "incoming_policer_name", 
                "path": [
                    "qos_option_id"
                ]
            }, 
            "primary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_uplink_vrrp_config_group": {
                "field": "secondary_uplink_vrrp_config_group", 
                "path": [
                    "interdc_service_id"
                ]
            }, 
            "secondary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "primary_downlink_vrrp_config_group": {
                "field": "primary_downlink_vrrp_config_group", 
                "path": [
                    "interdc_service_id"
                ]
            }, 
            "secondary_device_password": {
                "field": "password", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "uplink_vlan_id": {
                "field": "uplink_vlan_id"
            }, 
            "heat_timeout": {
                "constant": 60
            }, 
            "vrf_name": {
                "field": "vrf_name"
            }, 
            "primary_device_username": {
                "field": "login", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "primary_device_physical_downlink_interface": {
                "field": "name", 
                "path": [
                    "downlink_interface_id", 
                    "primary_interface_id"
                ]
            }, 
            "secondary_downlink_vrrp_config_group": {
                "field": "secondary_downlink_vrrp_config_group", 
                "path": [
                    "interdc_service_id"
                ]
            }, 
            "primary_uplink_vrrp_config_group": {
                "field": "primary_uplink_vrrp_config_group", 
                "path": [
                    "interdc_service_id"
                ]
            }, 
            "secondary_device_physical_uplink_interface": {
                "field": "name", 
                "path": [
                    "uplink_interface_id", 
                    "secondary_interface_id"
                ]
            }, 
            "secondary_device_ip": {
                "field": "ip", 
                "path": [
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,633:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,633:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,634:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,634:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,636:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,641:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/interdc_interface],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "interdc_interface", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Interdc Interface\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  primary_device_logical_interface:\n    description: Name of the created logical uplink interface on the Primary device\n    label: Logical Interface name\n    type: string\n  primary_device_downlink_physical_interface:\n    description: MX physical port on which logical downlink interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_physical_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_logical_interface:\n    description: Name of the created logical uplink interface on the Secondary device\n    label: Logical Interface name\n    type: string\n  secondary_device_downlink_physical_interface:\n    description: MX physical port on which downlink logical interface will be created\n    label: Underlying physical interface\n    type: string\n  primary_device_gw_ip:\n    description: IP on primary device\n    label: Inet Address CIDR\n    type: string\n  secondary_device_gw_ip:\n    description: IP on secondary device\n    label: Inet Address CIDR\n    type: string\n  primary_device_priority:\n    type: string\n    label: Primary device priority\n  secondary_device_priority:\n    type: string\n    label: Secondary device priority\n  vrf_name:\n    description: Name of VRF (routing-instance) in MX config\n    label: VRF Name\n    type: string\n  netmask:\n    description: Netmask for gw_ip\n    label: Netmask\n    type: number\n  uplink_vlan_id:\n    description: VLAN ID used on uplink interfaces (same for both primary and secondary device)\n    label: Uplink VLAN ID\n    type: string\n  downlink_vlan_id:\n    description: VLAN ID used on downlink interfaces (same for both primary and secondary device)\n    label: Downlink VLAN ID\n    type: string\n  gw_vip:\n    description: Virtual IP configured on VRRP\n    label: Inet Address CIDR\n    type: string\n  primary_device_gw_ip:\n    description: IP on primary device\n    label: Inet Address CIDR\n    type: string\n  secondary_device_gw_ip:\n    description: IP on secondary device\n    label: Inet Address CIDR\n    type: string\n  vrrp_group:\n    type: string\n    label: VRRP Group\n  primary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  secondary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the InterDC Interface\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      lock_timeout: 3000\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      configs:\n      - config:\n          str_replace:\n            params:\n              $VRRP_GROUP:\n                get_param: vrrp_group\n              $VIP:\n                get_param: gw_vip\n              $PRIORITY:\n                get_param: {{ device }}_device_priority\n              $DOWNLINK_IF:\n                get_param: secondary_device_downlink_physical_interface\n              $DOWNLINK_VLAN_ID:\n                get_param: downlink_vlan_id\n            template: |\n              vrrp-group $VRRP_GROUP {\n                virtual-address $VIP;\n                priority $PRIORITY;\n                track {\n                  interface $DOWNLINK_IF.$DOWNLINK_VLAN_ID {\n                    priority-cost 10;\n                  }\n                }\n              }\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: interfaces\n        - config_type: name\n          xml_type: named_tag\n          tag: interface\n          name: { get_param: {{ device }}_device_physical_interface }\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: unit\n          name: { get_param: uplink_vlan_id }\n        - config_type: tag\n          xml_type: tag\n          tag: family\n        - config_type: tag\n          xml_type: tag\n          tag: inet\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: address\n          name:\n            str_replace:\n              params:\n                $DEVICE_IP:\n                  get_param: {{ device }}_device_gw_ip\n                $NETMASK:\n                  get_param: netmask\n              template: |\n                $DEVICE_IP/$NETMASK\n{% endfor %}\n\n  vrrp_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: vrrp_pool\n      resource_type: interdc_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: status\n      properties:\n        vrid:\n          - { get_param: vrrp_group }\n        primary:\n          host: { get_param: primary_device_ip }\n          port: { get_param: primary_device_port }\n          login: { get_param: primary_device_username }\n          password: { get_param: primary_device_password }\n          interface: { get_param: primary_logical_interface_name }\n        secondary:\n          host: { get_param: secondary_device_ip }\n          port: { get_param: secondary_device_port }\n          login: { get_param: secondary_device_username }\n          password: { get_param: secondary_device_password }\n          interface: { get_param: secondary_logical_interface_name }\n      syncer_properties:\n        etcd:\n          status:\n            key: status\n          hold_options:\n            positive_status:\n              primary: MASTER\n              secondary: BACKUP\n            time_seconds: 360\n    depends_on: netconf_configure_secondary\n\n{% for device in [\"primary\", \"secondary\"] %}\n  {{ device }}_interface_metric_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_ports_metric\n      resource_type: interdc_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: {{ device }}_router\n      properties:\n        device_ip: { get_param: {{ device }}_device_ip }\n        if_name: { get_param: {{ device }}_device_logical_interface }\n        community_name: EDGE_ROUTER_COMMUNITY\n      syncer_properties:\n        tsdb:\n          traffic.in:\n            metric: traffic.bytes\n            tags:\n              device_index: {{ device }}\n              resource_id: { get_param: gohan_id }\n              direction: in\n          traffic.out:\n            metric: traffic.bytes\n            tags:\n              device_index: {{ device }}\n              resource_id: { get_param: gohan_id }\n              direction: out\n    depends_on: vrrp_monitor\n{% endfor %}\n\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: vrrp_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [vrrp_monitor, link]}\n{% for device in [\"primary\", \"secondary\"] %}\n  {{ device }}_interface_monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: {{ device }}_interface_metric_monitor}\n  {{ device }}_interface_monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [{{ device }}_interface_metric_monitor, link]}\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_physical_interface": {
                "field": "name", 
                "path": [
                    "interdc_gw_id", 
                    "uplink_interface_id", 
                    "secondary_interface_id"
                ]
            }, 
            "primary_device_logical_interface": {
                "field": "primary_logical_uplink_interface_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "primary_device_password": {
                "field": "password", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_gw_ip": {
                "field": "secondary_ipv4"
            }, 
            "gohan_id": {
                "field": "id"
            }, 
            "primary_device_downlink_physical_interface": {
                "field": "name", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "primary_interface_id"
                ]
            }, 
            "gw_vip": {
                "field": "gw_vipv4"
            }, 
            "primary_device_ip": {
                "field": "ip", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "version": {
                "version": "auto_filled"
            }, 
            "secondary_device_username": {
                "field": "login", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "downlink_vlan_id": {
                "field": "downlink_vlan_id", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "secondary_device_logical_interface": {
                "field": "secondary_logical_uplink_interface_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "secondary_logical_interface_name": {
                "field": "secondary_logical_uplink_interface_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "primary_logical_interface_name": {
                "field": "primary_logical_uplink_interface_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "primary_device_physical_interface": {
                "field": "name", 
                "path": [
                    "interdc_gw_id", 
                    "uplink_interface_id", 
                    "primary_interface_id"
                ]
            }, 
            "netmask": {
                "field": "netmask"
            }, 
            "secondary_device_downlink_physical_interface": {
                "field": "name", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "secondary_interface_id"
                ]
            }, 
            "primary_device_gw_ip": {
                "field": "primary_ipv4"
            }, 
            "vrrp_group": {
                "field": "vrid"
            }, 
            "primary_device_priority": {
                "constant": 105
            }, 
            "tenant_id": {
                "field": "tenant_id"
            }, 
            "secondary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "secondary_device_password": {
                "field": "password", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "uplink_vlan_id": {
                "field": "uplink_vlan_id", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "heat_timeout": {
                "constant": 60
            }, 
            "vrf_name": {
                "field": "vrf_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "primary_device_username": {
                "field": "login", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_priority": {
                "constant": 100
            }, 
            "primary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_ip": {
                "field": "ip", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,642:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,643:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,643:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,644:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,646:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,651:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/gw_interface_interdc],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "gw_interface_interdc", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Gateway Interface Inter DC\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  primary_device_physical_downlink_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  primary_device_physical_uplink_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_physical_downlink_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  secondary_device_physical_uplink_interface:\n    description: MX physical port on which logical interface will be created\n    label: Underlying physical interface\n    type: string\n  downlink_vlan_id:\n    description: Vlan tag for mx logical downlink interface\n    label: Vlan Tag\n    type: string\n  uplink_vlan_id:\n    description: Vlan tag for mx logical uplink interface\n    label: Vlan Tag\n    type: string\n  gw_vip:\n    description: Virtual IP configured on VRRP\n    label: Inet Address CIDR\n    type: string\n  primary_device_gw_ip:\n    description: IP on primary device\n    label: Inet Address CIDR\n    type: string\n  secondary_device_gw_ip:\n    description: IP on secondary device\n    label: Inet Address CIDR\n    type: string\n  netmask:\n    description: Netmask for gw_ip\n    label: Netmask\n    type: number\n  vrrp_group:\n    type: string\n    label: VRRP Group\n  primary_device_priority:\n    type: string\n    label: Primary device priority\n  secondary_device_priority:\n    type: string\n    label: Secondary device priority\n  vrf_name:\n    type: string\n    label: VRF\n  primary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  secondary_logical_interface_name:\n    description: MX logical port\n    label: Underlying logical interface\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the GW Interface\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    type: OS::Contrail::NetconfNamedConfigs\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    properties:\n      lock_timeout: 3000\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      configs:\n      - config:\n          str_replace:\n            params:\n              $VRRP_GROUP:\n                get_param: vrrp_group\n              $PRIORITY:\n                get_param: {{ device }}_device_priority\n              $VIP:\n                get_param: gw_vip\n              $UPLINK_IF:\n                get_param: {{device}}_device_physical_uplink_interface\n              $UPLINK_VLAN_ID:\n                get_param: uplink_vlan_id\n            template: |\n              vrrp-group $VRRP_GROUP {\n                virtual-address $VIP;\n                priority $PRIORITY;\n                track {\n                  interface $UPLINK_IF.$UPLINK_VLAN_ID {\n                    priority-cost 10;\n                  }\n                }\n              }\n        path:\n        - config_type: tag\n          xml_type: tag\n          tag: interfaces\n        - config_type: name\n          xml_type: named_tag\n          tag: interface\n          name: { get_param: {{ device }}_device_physical_downlink_interface }\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: unit\n          name: { get_param: downlink_vlan_id }\n        - config_type: tag\n          xml_type: tag\n          tag: family\n        - config_type: tag\n          xml_type: tag\n          tag: inet\n        - config_type: named_tag\n          xml_type: named_tag\n          tag: address\n          name:\n            str_replace:\n              params:\n                $DEVICE_IP:\n                  get_param: {{ device }}_device_gw_ip\n                $NETMASK:\n                  get_param: netmask\n              template: |\n                $DEVICE_IP/$NETMASK\n{% endfor %}\n\n  vrrp_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: vrrp_pool\n      resource_type: gw_interfaces\n      resource_id: { get_param: gohan_id }\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      field_name: status\n      properties:\n        vrid:\n          - { get_param: vrrp_group }\n        primary:\n          host: { get_param: primary_device_ip }\n          port: { get_param: primary_device_port }\n          login: { get_param: primary_device_username }\n          password: { get_param: primary_device_password }\n          interface: { get_param: primary_logical_interface_name }\n        secondary:\n          host: { get_param: secondary_device_ip }\n          port: { get_param: secondary_device_port }\n          login: { get_param: secondary_device_username }\n          password: { get_param: secondary_device_password }\n          interface: { get_param: secondary_logical_interface_name }\n      syncer_properties:\n        etcd:\n          status:\n            key: status\n          hold_options:\n            positive_status:\n              primary: MASTER\n              secondary: BACKUP\n            time_seconds: 360\n    depends_on: netconf_configure_secondary\n\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: vrrp_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [vrrp_monitor, link]}\n", 
        "parameter_mappings": {
            "primary_device_password": {
                "field": "password", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_gw_ip": {
                "field": "secondary_ipv4"
            }, 
            "gohan_id": {
                "field": "id"
            }, 
            "gw_vip": {
                "field": "gw_vipv4"
            }, 
            "primary_device_ip": {
                "field": "ip", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "version": {
                "version": "auto_filled"
            }, 
            "secondary_device_physical_downlink_interface": {
                "field": "name", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "secondary_interface_id"
                ]
            }, 
            "secondary_device_username": {
                "field": "login", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "downlink_vlan_id": {
                "field": "downlink_vlan_id", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "primary_device_physical_uplink_interface": {
                "field": "name", 
                "path": [
                    "interdc_gw_id", 
                    "uplink_interface_id", 
                    "primary_interface_id"
                ]
            }, 
            "secondary_logical_interface_name": {
                "field": "secondary_logical_downlink_interface_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "jinja_force_dependency1": {
                "field": "id", 
                "path": [
                    {
                        "type": "network", 
                        "id": "network_id"
                    }
                ]
            }, 
            "primary_logical_interface_name": {
                "field": "primary_logical_downlink_interface_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "primary_device_gw_ip": {
                "field": "primary_ipv4"
            }, 
            "netmask": {
                "field": "netmask"
            }, 
            "vrrp_group": {
                "field": "vrid"
            }, 
            "primary_device_priority": {
                "constant": 105
            }, 
            "tenant_id": {
                "field": "tenant_id"
            }, 
            "secondary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "secondary_device_password": {
                "field": "password", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "uplink_vlan_id": {
                "field": "uplink_vlan_id", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "heat_timeout": {
                "constant": 60
            }, 
            "vrf_name": {
                "field": "vrf_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "primary_device_username": {
                "field": "login", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "primary_device_physical_downlink_interface": {
                "field": "name", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "primary_interface_id"
                ]
            }, 
            "secondary_device_priority": {
                "constant": 100
            }, 
            "primary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_physical_uplink_interface": {
                "field": "name", 
                "path": [
                    "interdc_gw_id", 
                    "uplink_interface_id", 
                    "secondary_interface_id"
                ]
            }, 
            "secondary_device_ip": {
                "field": "ip", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,652:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,653:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,653:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,654:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,656:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,660:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/static_route_interdc],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "static_route_interdc", 
        "template_file": "heat_template_version: 2013-05-23\n\ndescription: >\n  Inter DC Gateway Static Route\n\nparameters:\n  primary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Primary Device.\n    label: Ip address of the device.\n    type: string\n  primary_device_port:\n    description: Port that will be used to establish ssh connection to the Primary Device.\n    label: Port of the ssh connection.\n    type: number\n  primary_device_username:\n    description: Name of the user which will be used to log onto the Primary Device.\n    label: User name to log on to device.\n    type: string\n  primary_device_password:\n    description: Password of the user which will be used to log onto the Primary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  secondary_device_ip:\n    description: Ip address that will be used to establish ssh connection to the Secondary Device.\n    label: Ip address of the device.\n    type: string\n  secondary_device_port:\n    description: Port that will be used to establish ssh connection to the Secondary Device.\n    label: Port of the ssh connection.\n    type: number\n  secondary_device_username:\n    description: Name of the user which will be used to log onto the Secondary Device.\n    label: User name to log on to device.\n    type: string\n  secondary_device_password:\n    description: Password of the user which will be used to log onto the Secondary Device.\n    label: Users password.\n    type: string\n    hidden: true\n  vrf_name:\n    description: Name of VRF to add this static route\n    label: VRF\n    type: string\n  route:\n    description: Static Route definition\n    label: Route\n    type: string\n  next_hop:\n    description: Next hop for the static route\n    label: Next hop\n    type: string\n\nresources:\n{% for device in [\"primary\", \"secondary\"] %}\n  netconf_configure_{{ device }}:\n    {% if device == \"secondary\" %}depends_on: netconf_configure_primary{% endif %}\n    type: OS::Contrail::NetconfNamedConfigs\n    properties:\n      lock_timeout: 3000\n      device_ip:\n        get_param: {{ device }}_device_ip\n      password:\n        get_param: {{ device }}_device_password\n      port:\n        get_param: {{ device }}_device_port\n      username:\n        get_param: {{ device }}_device_username\n      configs:\n      - config:\n          str_replace:\n            params:\n              $NEXT_HOP:\n                get_param: next_hop\n            template: |\n              next-hop $NEXT_HOP;\n        path:\n          - config_type: tag\n            xml_type: tag\n            tag: routing-instances\n          - config_type: name\n            xml_type: named_tag\n            tag: instance\n            name: { get_param: vrf_name }\n          - config_type: tag\n            xml_type: tag\n            tag: routing-options\n          - config_type: tag\n            xml_type: tag\n            tag: static\n          - config_type: named_tag\n            xml_type: named_tag\n            tag: route\n            name: { get_param: route }\n{% endfor %}\n", 
        "parameter_mappings": {
            "secondary_device_password": {
                "field": "password", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "route": {
                "field": "destination"
            }, 
            "primary_device_password": {
                "field": "password", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "primary_device_ip": {
                "field": "ip", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "heat_timeout": {
                "constant": 60
            }, 
            "next_hop": {
                "field": "nexthop"
            }, 
            "vrf_name": {
                "field": "vrf_name", 
                "path": [
                    "interdc_gw_id"
                ]
            }, 
            "primary_device_username": {
                "field": "login", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "primary_device_port": {
                "field": "ssh_port", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "primary_router_id"
                ]
            }, 
            "secondary_device_ip": {
                "field": "ip", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }, 
            "secondary_device_username": {
                "field": "login", 
                "path": [
                    "interdc_gw_id", 
                    "downlink_interface_id", 
                    "ha_router_id", 
                    "secondary_router_id"
                ]
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,661:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,662:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,662:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,663:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,664:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,669:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/quotas/default],
 value=[{
    "body": {
        "load_balancer": 10000, 
        "public_ip": 10000, 
        "gcp_gateway": 10000, 
        "aws_gateway": 10000, 
        "hosting_logical_link": 10000, 
        "hosting_physical_link_plane_storage": 10000, 
        "firewall": 10000, 
        "tenant_id": "default", 
        "subnet": 10000, 
        "azure_gateway": 10000, 
        "port": 30000, 
        "internet_gateway": 10000, 
        "colocation_logical_link": 10000, 
        "vpn_gateway": 10000, 
        "interdc_gateway": 10000, 
        "id": "default", 
        "common_function_gateway": 10000, 
        "network": 10000
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,669:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,670:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,670:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,671:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,673:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,678:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/reserve_addresses/default],
 value=[{
    "body": {
        "subnets": [
            "169.254.0.0/16", 
            "100.64.0.0/10"
        ], 
        "id": "default", 
        "tenant_id": "default"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,678:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,679:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,680:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,680:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,682:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,687:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/vnf_instance],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "vnf_instance", 
        "template_file": "heat_template_version: 2013-05-23\ndescription: VNF Instance\nparameters:\n  name:\n    default: \"\"\n    type: string\n  image:\n    type: string\n    constraints:\n    - custom_constraint: glance.image\n  flavor:\n    type: string\n    constraints:\n    - custom_constraint: nova.flavor\n  availability_zone:\n    type: string\n    default: \"\"\n  networks:\n    type: json\n  reboot:\n    type: string\n    default: \"\"\n  user_data:\n    type: string\n    default: \"\"\n  user_data_format:\n    type: string\n  config_drive:\n    type: boolean\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the VNF Instance\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n  server:\n    type: ESI::VNF::Instance\n    properties:\n      name: { get_param: name }\n      flavor: { get_param: flavor }\n      image: { get_param: image }\n      networks: { get_param: networks }\n      availability_zone: { get_param: availability_zone }\n      reboot: { get_param: reboot }\n      user_data: { get_param: user_data }\n      user_data_format: { get_param: user_data_format }\n      config_drive: { get_param: config_drive }\n  server_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: compute\n      resource_type: vnf_instances\n      resource_id: { get_param: gohan_id }\n      field_name: server\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      properties:\n        server_id: { get_resource: server }\n      syncer_properties:\n        etcd:\n          status:\n            key: server\n    depends_on: server\noutputs:\n  server_id:\n    description: A unique id for the nova server.\n    value: { get_resource: server }\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: server_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [server_monitor, link]}\n", 
        "parameter_mappings": {
            "user_data_format": "Puser_data_format", 
            "name": "Pname", 
            "availability_zone": "Pavailability_zone", 
            "tenant_id": "Ptenant_id", 
            "image": "Fvnf_template+vnf_template_id:image", 
            "reboot": "Preboot", 
            "user_data": "Puser_data", 
            "heat_timeout": "C18", 
            "version": "Vauto_filled", 
            "gohan_id": "Pid", 
            "flavor": "Fvnf_plan+vnf_plan_id:flavor", 
            "networks": "Pnetworks", 
            "config_drive": "Pconfig_drive"
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,688:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,688:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,689:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,689:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,691:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,694:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/firewall_config],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "firewall_config", 
        "template_file": "heat_template_version: 2013-05-23\ndescription: Vyatta Firewall Configuration\nparameters:\n  management_ip:\n    type: string\n  credentials:\n    type: json\n  default_gateway:\n    type: string\n    default: \"\"\n  user_username:\n    type: string\n  user_password:\n    type: string\n    default: \"\"\n    hidden: true\n  admin_username:\n    type: string\n  admin_password:\n    type: string\n    default: \"\"\n    hidden: true\n  other_username:\n    type: string\n    default: \"\"\n  other_password:\n    type: string\n    default: \"\"\n    hidden: true\n  networks:\n    type: json\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the VNF Instance\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n  server:\n    type: ESI::VNF::VyattaConfig\n    properties:\n      management_ip: { get_param: management_ip }\n      credentials: { get_param: credentials }\n      default_gateway: { get_param: default_gateway }\n      user_username: { get_param: user_username }\n      user_password: { get_param: user_password }\n      admin_username: { get_param: admin_username }\n      admin_password: { get_param: admin_password }\n      other_username: { get_param: other_username }\n      other_password: { get_param: other_password }\n      networks: { get_param: networks }\n  fw_device_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_device_fw\n      resource_type: firewalls\n      resource_id: { get_param: gohan_id }\n      field_name: firewall\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      properties:\n        device_ip: { get_param: management_ip }\n        community_name: FIREWALL_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: firewall\n        tsdb:\n          cpu.user:\n            metric: cpu.percents\n            tags:\n              resource_id: { get_param: gohan_id }\n              type: user\n          cpu.system:\n            metric: cpu.percents\n            tags:\n              resource_id: { get_param: gohan_id }\n              type: system\n          cpu.idle:\n            metric: cpu.percents\n            tags:\n              resource_id: { get_param: gohan_id }\n              type: idle\n          memory.total:\n            metric: memory.kbytes\n            tags:\n              resource_id: { get_param: gohan_id }\n              type: total\n          memory.available:\n            metric: memory.kbytes\n            tags:\n              resource_id: { get_param: gohan_id }\n              type: available\n          tcp.active:\n            metric: tcp.connections\n            tags:\n              resource_id: { get_param: gohan_id }\n              open: active\n          tcp.passive:\n            metric: tcp.connections\n            tags:\n              resource_id: { get_param: gohan_id }\n              open: passive\n    depends_on: server\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: fw_device_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [fw_device_monitor, link]}\n", 
        "parameter_mappings": {
            "default_gateway": {
                "field": "default_gateway"
            }, 
            "tenant_id": {
                "field": "tenant_id"
            }, 
            "user_password": {
                "field": "user_password"
            }, 
            "other_username": {
                "field": "other_username"
            }, 
            "management_ip": {
                "field": "management_ip", 
                "path": [
                    "vnf_instance_id"
                ]
            }, 
            "admin_username": {
                "field": "admin_username"
            }, 
            "user_username": {
                "field": "user_username"
            }, 
            "heat_timeout": {
                "constant": 13
            }, 
            "version": {
                "version": "auto_filled"
            }, 
            "other_password": {
                "field": "other_password"
            }, 
            "admin_password": {
                "field": "admin_password"
            }, 
            "credentials": {
                "field": "credentials", 
                "path": [
                    "vnf_instance_id", 
                    "vnf_template_id"
                ]
            }, 
            "gohan_id": {
                "field": "id"
            }, 
            "networks": {
                "field": "networks"
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,695:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,695:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,695:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,696:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,698:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,702:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/firewall_interface],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "firewall_interface", 
        "template_file": "heat_template_version: 2013-05-23\ndescription: Vyatta Firewall Interface\nparameters:\n  management_ip:\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the VNF Instance\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n  fw_interface_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_ports\n      resource_type: firewall_interfaces\n      resource_id: { get_param: gohan_id }\n      field_name: interface\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      properties:\n        device_ip: { get_param: management_ip }\n        if_name: dp0s{{ jinja_slot_number + 3 }}\n        community_name: FIREWALL_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: interface\n        tsdb:\n          traffic.in:\n            metric: traffic.bytes\n            tags:\n              resource_id: { get_param: gohan_id }\n              direction: in\n          traffic.out:\n            metric: traffic.bytes\n            tags:\n              resource_id: { get_param: gohan_id }\n              direction: out\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: fw_interface_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [fw_interface_monitor, link]}\n", 
        "parameter_mappings": {
            "jinja_slot_number": {
                "field": "slot_number"
            }, 
            "tenant_id": {
                "field": "tenant_id"
            }, 
            "management_ip": {
                "field": "management_ip", 
                "path": [
                    "firewall_id", 
                    "vnf_instance_id"
                ]
            }, 
            "heat_timeout": {
                "constant": 3
            }, 
            "version": {
                "version": "auto_filled"
            }, 
            "gohan_id": {
                "field": "id"
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,703:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,704:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,704:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,711:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,713:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,716:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/load_balancer_syslog_server],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "load_balancer_syslog_server", 
        "template_file": "heat_template_version: 2013-05-23\ndescription: Syslog server\nparameters:\n  name:\n    type: string\n  ip_address:\n    type: string\n  port_number:\n    type: number\n  log_level:\n    type: string\n  log_facility:\n    type: string\n  tcp_logging:\n    type: string\n  acl_logging:\n    type: string\n  appflow_logging:\n    type: string\n  date_format:\n    type: string\n  time_zone:\n    type: string\n  user_configurable_log_messages:\n    type: string\n  transport_type:\n    type: string\n  priority:\n    type: number\n  vserver_ip_address:\n    type: string\n  comment:\n    type: string\n  management_ip:\n    type: string\n  credentials:\n    type: string\n  init_config:\n    type: string\nresources:\n  load_balancer_syslog_server:\n    type: ESI::VNF::NetscalerSyslogServer\n    properties:\n      name: { get_param: name }\n      ip_address: { get_param: ip_address }\n      port_number: { get_param: port_number }\n      log_level: { get_param: log_level }\n      log_facility: { get_param: log_facility }\n      tcp_logging: { get_param: tcp_logging }\n      acl_logging: { get_param: acl_logging }\n      appflow_logging: { get_param: appflow_logging }\n      date_format: { get_param: date_format }\n      time_zone: { get_param: time_zone }\n      user_configurable_log_messages: { get_param: user_configurable_log_messages }\n      transport_type: { get_param: transport_type }\n      priority: { get_param: priority }\n      vserver_ip_address: { get_param: vserver_ip_address }\n      comment: { get_param: comment }\n      management_ip: { get_param: management_ip }\n      credentials: { get_param: credentials }\n      init_config: { get_param: init_config }\n", 
        "parameter_mappings": {
            "comment": {
                "field": "comment"
            }, 
            "date_format": {
                "field": "date_format"
            }, 
            "appflow_logging": {
                "field": "appflow_logging"
            }, 
            "name": {
                "field": "name"
            }, 
            "port_number": {
                "field": "port_number"
            }, 
            "tcp_logging": {
                "field": "tcp_logging"
            }, 
            "vserver_ip_address": {
                "field": "vserver_ip_address"
            }, 
            "log_level": {
                "field": "log_level"
            }, 
            "init_config": {
                "field": "init_config", 
                "path": [
                    "load_balancer_id", 
                    "load_balancer_plan_id", 
                    "vnf_template_id"
                ]
            }, 
            "acl_logging": {
                "field": "acl_logging"
            }, 
            "time_zone": {
                "field": "time_zone"
            }, 
            "priority": {
                "field": "priority"
            }, 
            "transport_type": {
                "field": "transport_type"
            }, 
            "heat_timeout": {
                "constant": 10
            }, 
            "management_ip": {
                "field": "management_ip", 
                "path": [
                    "load_balancer_id", 
                    "vnf_instance_id"
                ]
            }, 
            "log_facility": {
                "field": "log_facility"
            }, 
            "credentials": {
                "field": "credentials", 
                "path": [
                    "load_balancer_id", 
                    "load_balancer_plan_id", 
                    "vnf_template_id"
                ]
            }, 
            "ip_address": {
                "field": "ip_address"
            }, 
            "user_configurable_log_messages": {
                "field": "user_configurable_log_messages"
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,717:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,717:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,717:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,718:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,719:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,723:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/load_balancer],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "load_balancer", 
        "template_file": "heat_template_version: 2013-05-23\ndescription: Load Balancer\nparameters:\n  management_ip:\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the VNF Instance\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n  lb_device_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_device_lb\n      resource_type: load_balancers\n      resource_id: { get_param: gohan_id }\n      field_name: load_balancer\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      properties:\n        device_ip: { get_param: management_ip }\n        community_name: LOAD_BALANCER_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: load_balancer\n        tsdb:\n          cpu.usage:\n            metric: cpu.percents\n            tags:\n              resource_id: { get_param: gohan_id }\n              type: usage\n          memory.usage:\n            metric: memory.percents\n            tags:\n              resource_id: { get_param: gohan_id }\n              type: usage\n          http.request:\n            metric: http.request.connections\n            tags:\n              resource_id: { get_param: gohan_id }\n          tcp.client:\n            metric: tcp.connections\n            tags:\n              resource_id: { get_param: gohan_id }\n              owner: client\n          tcp.server:\n            metric: tcp.connections\n            tags:\n              resource_id: { get_param: gohan_id }\n              owner: server\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: lb_device_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [lb_device_monitor, link]}\n", 
        "parameter_mappings": {
            "jinja_force_dependency": {
                "field": "id", 
                "path": [
                    "load_balancer_conf_id"
                ]
            }, 
            "tenant_id": {
                "field": "tenant_id"
            }, 
            "management_ip": {
                "field": "management_ip", 
                "path": [
                    "vnf_instance_id"
                ]
            }, 
            "heat_timeout": {
                "constant": 3
            }, 
            "version": {
                "version": "auto_filled"
            }, 
            "gohan_id": {
                "field": "id"
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,724:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,724:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,724:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,725:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,727:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:38:39,731:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/heat_templates/load_balancer_interface],
 value=[{
    "body": {
        "handler": "heat_worker", 
        "watch": [], 
        "id": "load_balancer_interface", 
        "template_file": "heat_template_version: 2013-05-23\ndescription: Load Balancer Interface\nparameters:\n  management_ip:\n    type: string\n  gohan_id:\n    type: string\n    label: Gohan resource ID\n    description: UUID of the VNF Instance\n  tenant_id:\n    type: string\n    label: Tenant ID\n  version:\n    type: number\n    label: Config version\nresources:\n  lb_interface_monitor:\n    type: ESI::Monitoring::MonitoringTarget\n    properties:\n      type: snmp_ports\n      resource_type: load_balancer_interfaces\n      resource_id: { get_param: gohan_id }\n      field_name: interface\n      tenant_id: { get_param: tenant_id }\n      version: { get_param: version }\n      properties:\n        device_ip: { get_param: management_ip }\n        {% if jinja_slot_number == 0  %}\n        if_name: 0/1\n        {% else %}\n        if_name: 1/{{ jinja_slot_number }}\n        {% endif %}\n        community_name: LOAD_BALANCER_COMMUNITY\n      syncer_properties:\n        etcd:\n          status:\n            key: interface\n        tsdb:\n          traffic.in:\n            metric: traffic.bytes\n            tags:\n              resource_id: { get_param: gohan_id }\n              direction: in\n          traffic.out:\n            metric: traffic.bytes\n            tags:\n              resource_id: { get_param: gohan_id }\n              direction: out\noutputs:\n  monitoring_target_id:\n    description: Monitoring Target ID\n    value: { get_resource: lb_interface_monitor}\n  monitoring_link:\n    description: Monitoring Process Link\n    value: { get_attr: [lb_interface_monitor, link]}\n", 
        "parameter_mappings": {
            "jinja_slot_number": {
                "field": "slot_number"
            }, 
            "tenant_id": {
                "field": "tenant_id"
            }, 
            "management_ip": {
                "field": "management_ip", 
                "path": [
                    "load_balancer_id", 
                    "vnf_instance_id"
                ]
            }, 
            "heat_timeout": {
                "constant": 3
            }, 
            "version": {
                "version": "auto_filled"
            }, 
            "gohan_id": {
                "field": "id"
            }
        }
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:38:39,731:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:38:39,731:DEBUG:About to wait on key /config, index None
2018-02-12 07:38:39,732:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:38:39,732:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:38:39,734:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:39:25,855:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/common/v1.0/tenants/0f40dffa48614d9baa7eaac7e7532099],
 value=[{
    "body": {
        "status": "active", 
        "delete_retries": 0, 
        "end_time": "", 
        "id": "0f40dffa48614d9baa7eaac7e7532099"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:39:25,856:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:39:25,856:DEBUG:About to wait on key /config, index None
2018-02-12 07:39:25,857:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:39:25,858:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:39:25,859:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:39:25,866:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/networks/73b2c401-a1f3-49fb-8612-8c755b37a28d],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "subnets": [], 
        "description": "dummy network for firewall", 
        "admin_state_up": true, 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "tags": {}, 
        "plane": "data", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "shared": false, 
        "id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "name": "dummy-net"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:39:25,866:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:39:25,869:DEBUG:About to wait on key /config, index None
2018-02-12 07:39:25,870:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:39:25,872:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:39:25,875:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:39:35,856:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/subnets/1244d619-cc55-4bb7-b181-606776ba5e88],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "description": "dummy subnet for firewall", 
        "enable_dhcp": true, 
        "tags": {}, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "dns_nameservers": [], 
        "dhcp_server_address": "10.121.232.2", 
        "ntp_servers": [], 
        "allocation_pools": [
            {
                "start": "10.121.232.2", 
                "end": "10.121.232.254"
            }
        ], 
        "gateway_ip": "10.121.232.1", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "ip_version": 4, 
        "host_routes": [], 
        "cidr": "10.121.232.0/24", 
        "id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
        "name": "dummy-subnet"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:39:35,857:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:39:35,858:DEBUG:About to wait on key /config, index None
2018-02-12 07:39:35,859:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:39:35,861:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:39:35,864:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:39:35,870:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/db7b07e7-5fb8-4400-9a64-f3b1df8038f2],
 value=[{
    "body": {
        "status": "ACTIVE", 
        "description": "DHCP Server Port", 
        "allowed_address_pairs": [], 
        "admin_state_up": true, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "name": "dhcp-server-port", 
        "binding:vif_type": "vrouter", 
        "device_owner": "network:dhcp", 
        "tags": {}, 
        "fake_delete": false, 
        "orchestration_state": "NO_STATE", 
        "mac_address": "00:00:5e:00:01:00", 
        "host_routes": [], 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.2"
            }
        ], 
        "id": "db7b07e7-5fb8-4400-9a64-f3b1df8038f2", 
        "security_groups": [], 
        "device_id": "1244d619-cc55-4bb7-b181-606776ba5e88"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:39:35,870:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:39:35,871:DEBUG:About to wait on key /config, index None
2018-02-12 07:39:35,871:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:39:35,872:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:39:35,874:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:39:43,584:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/networks/75c2c3ec-7fe7-494c-a35c-db3f94d3a554],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "subnets": [], 
        "description": "adminpod network", 
        "admin_state_up": true, 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "tags": {}, 
        "plane": "data", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "shared": false, 
        "id": "75c2c3ec-7fe7-494c-a35c-db3f94d3a554", 
        "name": "adminpod-net"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:39:43,585:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:39:43,585:DEBUG:About to wait on key /config, index None
2018-02-12 07:39:43,586:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:39:43,587:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:39:43,589:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:39:50,685:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/subnets/c8090497-34be-456b-9186-377e918f3d50],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "description": "adminpod subnet", 
        "enable_dhcp": true, 
        "tags": {}, 
        "network_id": "75c2c3ec-7fe7-494c-a35c-db3f94d3a554", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "dns_nameservers": [], 
        "dhcp_server_address": "100.64.193.2", 
        "ntp_servers": [], 
        "allocation_pools": [
            {
                "start": "100.64.193.2", 
                "end": "100.64.193.254"
            }
        ], 
        "gateway_ip": "100.64.193.1", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "ip_version": 4, 
        "host_routes": [
            {
                "nexthop": "100.64.193.1", 
                "destination": "172.26.10.0/24"
            }
        ], 
        "cidr": "100.64.193.0/24", 
        "id": "c8090497-34be-456b-9186-377e918f3d50", 
        "name": "adminpod-subnet"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:39:50,686:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:39:50,687:DEBUG:About to wait on key /config, index None
2018-02-12 07:39:50,687:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:39:50,688:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:39:50,692:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:39:50,693:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/10de1073-2a60-4bbc-810b-642537ad19bf],
 value=[{
    "body": {
        "status": "ACTIVE", 
        "description": "DHCP Server Port", 
        "allowed_address_pairs": [], 
        "admin_state_up": true, 
        "network_id": "75c2c3ec-7fe7-494c-a35c-db3f94d3a554", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "name": "dhcp-server-port", 
        "binding:vif_type": "vrouter", 
        "device_owner": "network:dhcp", 
        "tags": {}, 
        "fake_delete": false, 
        "orchestration_state": "NO_STATE", 
        "mac_address": "00:00:5e:00:01:00", 
        "host_routes": [], 
        "fixed_ips": [
            {
                "subnet_id": "c8090497-34be-456b-9186-377e918f3d50", 
                "ip_address": "100.64.193.2"
            }
        ], 
        "id": "10de1073-2a60-4bbc-810b-642537ad19bf", 
        "security_groups": [], 
        "device_id": "c8090497-34be-456b-9186-377e918f3d50"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:39:50,694:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:39:50,694:DEBUG:About to wait on key /config, index None
2018-02-12 07:39:50,695:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:39:50,696:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:39:50,698:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:39:59,659:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/vnf_templates/5a84974a-9d8b-4887-898b-8e3c095e744d],
 value=[{
    "body": {
        "function": "firewall", 
        "management_networks": [
            "75c2c3ec-7fe7-494c-a35c-db3f94d3a554"
        ], 
        "vendor": "vyatta", 
        "description": "lab3-vyatta-3.5R6_20151204", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "image": "vyatta-0108-2016", 
        "init_config": {}, 
        "version": "3.5R6", 
        "dummy_networks": [
            "73b2c401-a1f3-49fb-8612-8c755b37a28d"
        ], 
        "user_data_template": "", 
        "security_group": "permit-any", 
        "credentials": {
            "username": "vfwadmin", 
            "password": "password"
        }, 
        "id": "5a84974a-9d8b-4887-898b-8e3c095e744d", 
        "name": "vyatta-template-3.5R6"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:39:59,659:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:39:59,660:DEBUG:About to wait on key /config, index None
2018-02-12 07:39:59,661:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:39:59,661:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:39:59,663:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:00,445:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/vnf_plans/60791395-2267-4553-b115-a38fad3ebf69],
 value=[{
    "body": {
        "function": "firewall", 
        "interface_limit": 3, 
        "vendor": "vyatta", 
        "description": "vyatta-2CPU-2IF", 
        "default_interface_number": 3, 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "flavor": "m1.large", 
        "id": "60791395-2267-4553-b115-a38fad3ebf69", 
        "name": "vyatta-2CPU-2IF"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:00,445:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:00,446:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:00,447:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:00,450:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:00,477:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:01,198:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/firewall_plans/40520774-4f10-4e8c-90fa-550bd4cdf101],
 value=[{
    "body": {
        "vendor": "vyatta", 
        "description": "", 
        "vnf_plan_id": "60791395-2267-4553-b115-a38fad3ebf69", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "vnf_template_id": "5a84974a-9d8b-4887-898b-8e3c095e744d", 
        "enabled": true, 
        "version": "3.5R6S3-test", 
        "is_public": true, 
        "id": "40520774-4f10-4e8c-90fa-550bd4cdf101", 
        "name": "Brocade_5600_vRouter_3.5R6S3_2CPU-8GB-2IF"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:01,198:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:01,199:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:01,200:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:01,200:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:01,202:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:02,818:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/cdde9cfd-a898-4911-b812-b6849f611549],
 value=[{
    "body": {
        "allowed_address_pairs": [], 
        "device_owner": "", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "c8090497-34be-456b-9186-377e918f3d50", 
                "ip_address": "100.64.193.3"
            }
        ], 
        "id": "cdde9cfd-a898-4911-b812-b6849f611549", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:2f:e8:a6", 
        "status": "PENDING_CREATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "", 
        "name": "firewall-management-port", 
        "admin_state_up": true, 
        "network_id": "75c2c3ec-7fe7-494c-a35c-db3f94d3a554", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:02,819:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:02,819:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:02,820:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:02,821:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:02,823:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:02,834:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/dea87c7b-b43f-4936-8e32-8995b038b3f8],
 value=[{
    "body": {
        "allowed_address_pairs": [], 
        "device_owner": "", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.3"
            }
        ], 
        "id": "dea87c7b-b43f-4936-8e32-8995b038b3f8", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:99:1e:37", 
        "status": "PENDING_CREATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:02,834:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:02,835:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:02,836:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:02,837:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:02,840:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:02,854:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/fd09eda4-10b1-4534-984a-7124c338c69d],
 value=[{
    "body": {
        "allowed_address_pairs": [], 
        "device_owner": "", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.4"
            }
        ], 
        "id": "fd09eda4-10b1-4534-984a-7124c338c69d", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:8e:dd:05", 
        "status": "PENDING_CREATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:02,855:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:02,856:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:02,857:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:02,861:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:02,865:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:02,873:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/vnf_interfaces/c6cf2771-be40-4d16-ba15-20a62f8b78f6],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "type": "user", 
        "name": "interface-1", 
        "network_id": null, 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "vnf_instance_id": "44799fe4-6fbf-4a5d-a2bc-ccd45e9f04eb", 
        "slot_number": 1, 
        "port_id": "dea87c7b-b43f-4936-8e32-8995b038b3f8", 
        "id": "c6cf2771-be40-4d16-ba15-20a62f8b78f6"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:02,873:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:02,875:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:02,875:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:02,878:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:02,885:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:02,886:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/vnf_interfaces/1e047117-2ca8-43dc-aa80-619b224bab4c],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "type": "user", 
        "name": "interface-2", 
        "network_id": null, 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "vnf_instance_id": "44799fe4-6fbf-4a5d-a2bc-ccd45e9f04eb", 
        "slot_number": 2, 
        "port_id": "fd09eda4-10b1-4534-984a-7124c338c69d", 
        "id": "1e047117-2ca8-43dc-aa80-619b224bab4c"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:02,886:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:02,887:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:02,888:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:02,889:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:02,892:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:02,894:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/firewalls/8e4c20be-d221-43f4-8325-0162c1f06166],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "other_username": "", 
        "description": "", 
        "user_username": "user-read", 
        "default_gateway": "192.168.1.1", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "interfaces": [], 
        "availability_zone": "nova", 
        "admin_username": "user-admin", 
        "networks": [
            {
                "ifname": "dp0s4", 
                "type": "disable"
            }, 
            {
                "ifname": "dp0s5", 
                "type": "disable"
            }
        ], 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "user_password": "k3cjZ4FNRrkX", 
        "other_password": "", 
        "admin_password": "f5UhAERVGmYS", 
        "firewall_plan_id": "40520774-4f10-4e8c-90fa-550bd4cdf101", 
        "vnf_instance_id": "44799fe4-6fbf-4a5d-a2bc-ccd45e9f04eb", 
        "operational_state": "NO_STATE", 
        "id": "8e4c20be-d221-43f4-8325-0162c1f06166", 
        "name": ""
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:02,895:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:02,896:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:02,897:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:02,899:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:02,901:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:02,913:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/firewall_interfaces/3543155d-0d9a-43a3-ae77-3479cf8a0e4a],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "name": "dp0s4", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "vnf_interface_id": "c6cf2771-be40-4d16-ba15-20a62f8b78f6", 
        "operational_state": "NO_STATE", 
        "firewall_id": "8e4c20be-d221-43f4-8325-0162c1f06166", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "slot_number": 1, 
        "type": "user", 
        "id": "3543155d-0d9a-43a3-ae77-3479cf8a0e4a"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:02,913:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:02,914:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:02,914:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:02,915:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:02,917:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:02,920:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/firewall_interfaces/1c351257-d185-40b7-b04a-6272de75d434],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "type": "management", 
        "name": "dp0s3", 
        "network_id": "75c2c3ec-7fe7-494c-a35c-db3f94d3a554", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "vnf_interface_id": "c8fef8f8-a7a1-448f-ae76-81992e598016", 
        "operational_state": "NO_STATE", 
        "firewall_id": "8e4c20be-d221-43f4-8325-0162c1f06166", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "slot_number": 0, 
        "ip_address": "100.64.193.3", 
        "id": "1c351257-d185-40b7-b04a-6272de75d434"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:02,920:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:02,921:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:02,921:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:02,922:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:02,926:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:10,417:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/cdde9cfd-a898-4911-b812-b6849f611549],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "c8090497-34be-456b-9186-377e918f3d50", 
                "ip_address": "100.64.193.3"
            }
        ], 
        "id": "cdde9cfd-a898-4911-b812-b6849f611549", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:2f:e8:a6", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-management-port", 
        "admin_state_up": true, 
        "network_id": "75c2c3ec-7fe7-494c-a35c-db3f94d3a554", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 2, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:10,418:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:10,419:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:10,420:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:10,420:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:10,422:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:40:21,210:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/cdde9cfd-a898-4911-b812-b6849f611549],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "c8090497-34be-456b-9186-377e918f3d50", 
                "ip_address": "100.64.193.3"
            }
        ], 
        "id": "cdde9cfd-a898-4911-b812-b6849f611549", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:2f:e8:a6", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-management-port", 
        "admin_state_up": true, 
        "network_id": "75c2c3ec-7fe7-494c-a35c-db3f94d3a554", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": true, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 3, 
    "marked_for_deletion": false
}]
2018-02-12 07:40:21,210:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:40:21,211:DEBUG:About to wait on key /config, index None
2018-02-12 07:40:21,211:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:40:21,212:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:40:21,216:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:44:15,218:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/dea87c7b-b43f-4936-8e32-8995b038b3f8],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.3"
            }
        ], 
        "id": "dea87c7b-b43f-4936-8e32-8995b038b3f8", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:99:1e:37", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 2, 
    "marked_for_deletion": false
}]
2018-02-12 07:44:15,219:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:44:15,220:DEBUG:About to wait on key /config, index None
2018-02-12 07:44:15,220:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:44:15,221:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:44:15,224:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:44:26,062:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/dea87c7b-b43f-4936-8e32-8995b038b3f8],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.3"
            }
        ], 
        "id": "dea87c7b-b43f-4936-8e32-8995b038b3f8", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:99:1e:37", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": true, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 3, 
    "marked_for_deletion": false
}]
2018-02-12 07:44:26,062:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:44:26,063:DEBUG:About to wait on key /config, index None
2018-02-12 07:44:26,064:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:44:26,065:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:44:26,066:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:44:28,648:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/fd09eda4-10b1-4534-984a-7124c338c69d],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.4"
            }
        ], 
        "id": "fd09eda4-10b1-4534-984a-7124c338c69d", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:8e:dd:05", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 2, 
    "marked_for_deletion": false
}]
2018-02-12 07:44:28,648:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:44:28,649:DEBUG:About to wait on key /config, index None
2018-02-12 07:44:28,650:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:44:28,650:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:44:28,653:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:44:39,459:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/fd09eda4-10b1-4534-984a-7124c338c69d],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.4"
            }
        ], 
        "id": "fd09eda4-10b1-4534-984a-7124c338c69d", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:8e:dd:05", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": true, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 3, 
    "marked_for_deletion": false
}]
2018-02-12 07:44:39,459:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:44:39,460:DEBUG:About to wait on key /config, index None
2018-02-12 07:44:39,461:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:44:39,462:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:44:39,464:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:46:43,134:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/networks/82712b89-c35c-4276-83cb-818860d41f9e],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "subnets": [], 
        "description": "firewall network", 
        "admin_state_up": true, 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "tags": {}, 
        "plane": "data", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "shared": false, 
        "id": "82712b89-c35c-4276-83cb-818860d41f9e", 
        "name": "sample-fw-net"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:46:43,135:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:46:43,135:DEBUG:About to wait on key /config, index None
2018-02-12 07:46:43,136:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:46:43,136:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:46:43,138:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:46:51,443:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/subnets/a11785e2-0c2b-4131-9144-349155f958f5],
 value=[{
    "body": {
        "status": "PENDING_CREATE", 
        "description": "firewall subnet", 
        "enable_dhcp": true, 
        "tags": {}, 
        "network_id": "82712b89-c35c-4276-83cb-818860d41f9e", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "dns_nameservers": [], 
        "dhcp_server_address": "10.98.76.2", 
        "ntp_servers": [], 
        "allocation_pools": [
            {
                "start": "10.98.76.2", 
                "end": "10.98.76.254"
            }
        ], 
        "gateway_ip": "10.98.76.1", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "ip_version": 4, 
        "host_routes": [], 
        "cidr": "10.98.76.0/24", 
        "id": "a11785e2-0c2b-4131-9144-349155f958f5", 
        "name": "sample-fw-subnet"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:46:51,445:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:46:51,445:DEBUG:About to wait on key /config, index None
2018-02-12 07:46:51,446:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:46:51,447:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:46:51,450:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:46:51,454:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/c18705d5-e40a-4bb7-94da-3dc9a93b32e5],
 value=[{
    "body": {
        "status": "ACTIVE", 
        "description": "DHCP Server Port", 
        "allowed_address_pairs": [], 
        "admin_state_up": true, 
        "network_id": "82712b89-c35c-4276-83cb-818860d41f9e", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "name": "dhcp-server-port", 
        "binding:vif_type": "vrouter", 
        "device_owner": "network:dhcp", 
        "tags": {}, 
        "fake_delete": false, 
        "orchestration_state": "NO_STATE", 
        "mac_address": "00:00:5e:00:01:00", 
        "host_routes": [], 
        "fixed_ips": [
            {
                "subnet_id": "a11785e2-0c2b-4131-9144-349155f958f5", 
                "ip_address": "10.98.76.2"
            }
        ], 
        "id": "c18705d5-e40a-4bb7-94da-3dc9a93b32e5", 
        "security_groups": [], 
        "device_id": "a11785e2-0c2b-4131-9144-349155f958f5"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:46:51,454:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:46:51,455:DEBUG:About to wait on key /config, index None
2018-02-12 07:46:51,455:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:46:51,456:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:46:51,458:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:46:59,765:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/472879c4-4611-4762-a069-293e0081bcbf],
 value=[{
    "body": {
        "allowed_address_pairs": [], 
        "device_owner": "", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "a11785e2-0c2b-4131-9144-349155f958f5", 
                "ip_address": "10.98.76.3"
            }
        ], 
        "id": "472879c4-4611-4762-a069-293e0081bcbf", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:f0:f2:72", 
        "status": "PENDING_CREATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "", 
        "name": "firewall-user-port", 
        "admin_state_up": true, 
        "network_id": "82712b89-c35c-4276-83cb-818860d41f9e", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "CREATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 1, 
    "marked_for_deletion": false
}]
2018-02-12 07:46:59,766:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:46:59,767:DEBUG:About to wait on key /config, index None
2018-02-12 07:46:59,767:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:46:59,768:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:46:59,770:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:46:59,779:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/vnf_interfaces/c6cf2771-be40-4d16-ba15-20a62f8b78f6],
 value=[{
    "body": {
        "status": "PENDING_UPDATE", 
        "type": "user", 
        "description": null, 
        "network_id": "82712b89-c35c-4276-83cb-818860d41f9e", 
        "ip_address": "10.98.76.3", 
        "vnf_instance_id": "44799fe4-6fbf-4a5d-a2bc-ccd45e9f04eb", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "slot_number": 1, 
        "virtual_ip_address": null, 
        "virtual_ip_properties": null, 
        "port_id": "472879c4-4611-4762-a069-293e0081bcbf", 
        "id": "c6cf2771-be40-4d16-ba15-20a62f8b78f6", 
        "name": "interface-1"
    }, 
    "version": 2, 
    "marked_for_deletion": false
}]
2018-02-12 07:46:59,780:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:46:59,781:DEBUG:About to wait on key /config, index None
2018-02-12 07:46:59,782:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:46:59,783:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:46:59,785:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:46:59,789:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/vnf_instances/44799fe4-6fbf-4a5d-a2bc-ccd45e9f04eb],
 value=[{
    "body": {
        "status": "PENDING_UPDATE", 
        "user_data_format": "RAW", 
        "user_data_parameters": {}, 
        "description": null, 
        "availability_zone": "nova", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "vnf_template_id": "5a84974a-9d8b-4887-898b-8e3c095e744d", 
        "vnf_plan_id": "60791395-2267-4553-b115-a38fad3ebf69", 
        "networks": [
            {
                "port": "cdde9cfd-a898-4911-b812-b6849f611549"
            }, 
            {
                "port": "472879c4-4611-4762-a069-293e0081bcbf"
            }, 
            {
                "port": "fd09eda4-10b1-4534-984a-7124c338c69d"
            }
        ], 
        "reboot": "", 
        "name": "firewall-8e4c20be-d221-43f4-8325-0162c1f06166", 
        "management_ip": "100.64.193.3", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "owner_tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "user_data": "", 
        "operational_state": "INIT", 
        "id": "44799fe4-6fbf-4a5d-a2bc-ccd45e9f04eb", 
        "config_drive": false
    }, 
    "version": 2, 
    "marked_for_deletion": false
}]
2018-02-12 07:46:59,790:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:46:59,791:DEBUG:About to wait on key /config, index None
2018-02-12 07:46:59,793:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:46:59,794:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:46:59,798:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:46:59,799:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/firewall_interfaces/3543155d-0d9a-43a3-ae77-3479cf8a0e4a],
 value=[{
    "body": {
        "status": "PENDING_UPDATE", 
        "type": "user", 
        "description": null, 
        "network_id": "82712b89-c35c-4276-83cb-818860d41f9e", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "vnf_interface_id": "c6cf2771-be40-4d16-ba15-20a62f8b78f6", 
        "operational_state": "INIT", 
        "firewall_id": "8e4c20be-d221-43f4-8325-0162c1f06166", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "slot_number": 1, 
        "virtual_ip_address": null, 
        "virtual_ip_properties": null, 
        "ip_address": "10.98.76.3", 
        "id": "3543155d-0d9a-43a3-ae77-3479cf8a0e4a", 
        "name": "dp0s4"
    }, 
    "version": 2, 
    "marked_for_deletion": false
}]
2018-02-12 07:46:59,800:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:46:59,801:DEBUG:About to wait on key /config, index None
2018-02-12 07:46:59,801:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:46:59,803:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:46:59,807:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:46:59,809:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/firewalls/8e4c20be-d221-43f4-8325-0162c1f06166],
 value=[{
    "body": {
        "status": "PENDING_UPDATE", 
        "other_username": "", 
        "description": "", 
        "user_username": "user-read", 
        "default_gateway": "192.168.1.1", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "interfaces": [], 
        "availability_zone": "nova", 
        "admin_username": "user-admin", 
        "networks": [
            {
                "type": "static", 
                "cidr": "24", 
                "ip_address": "10.98.76.3", 
                "ifname": "dp0s4"
            }, 
            {
                "ifname": "dp0s5", 
                "type": "disable"
            }
        ], 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "user_password": "k3cjZ4FNRrkX", 
        "other_password": "", 
        "admin_password": "f5UhAERVGmYS", 
        "firewall_plan_id": "40520774-4f10-4e8c-90fa-550bd4cdf101", 
        "vnf_instance_id": "44799fe4-6fbf-4a5d-a2bc-ccd45e9f04eb", 
        "operational_state": "INIT", 
        "id": "8e4c20be-d221-43f4-8325-0162c1f06166", 
        "name": ""
    }, 
    "version": 2, 
    "marked_for_deletion": false
}]
2018-02-12 07:46:59,810:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:46:59,810:DEBUG:About to wait on key /config, index None
2018-02-12 07:46:59,811:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:46:59,811:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:46:59,813:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:47:06,936:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/dea87c7b-b43f-4936-8e32-8995b038b3f8],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": false, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.3"
            }
        ], 
        "id": "dea87c7b-b43f-4936-8e32-8995b038b3f8", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:99:1e:37", 
        "status": "PENDING_DELETE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": true, 
        "operational_state": "INIT", 
        "orchestration_state": "DELETE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 4, 
    "marked_for_deletion": true
}]
2018-02-12 07:47:06,936:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:47:06,937:DEBUG:About to wait on key /config, index None
2018-02-12 07:47:06,938:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:47:06,938:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:47:06,943:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:47:11,342:DEBUG:
*** Consume stored data in etcd ***
 action=[delete], key=[/config/v2.0/ports/dea87c7b-b43f-4936-8e32-8995b038b3f8],
 value=[]
2018-02-12 07:47:11,343:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:47:11,344:DEBUG:About to wait on key /config, index None
2018-02-12 07:47:11,344:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:47:11,345:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:47:11,346:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:47:13,157:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/fd09eda4-10b1-4534-984a-7124c338c69d],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.4"
            }
        ], 
        "id": "fd09eda4-10b1-4534-984a-7124c338c69d", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:8e:dd:05", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "INIT", 
        "segmentation_type": "flat"
    }, 
    "version": 4, 
    "marked_for_deletion": false
}]
2018-02-12 07:47:13,158:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:47:13,159:DEBUG:About to wait on key /config, index None
2018-02-12 07:47:13,159:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:47:13,160:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:47:13,162:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:48:25,636:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/472879c4-4611-4762-a069-293e0081bcbf],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "a11785e2-0c2b-4131-9144-349155f958f5", 
                "ip_address": "10.98.76.3"
            }
        ], 
        "id": "472879c4-4611-4762-a069-293e0081bcbf", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:f0:f2:72", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": true, 
        "network_id": "82712b89-c35c-4276-83cb-818860d41f9e", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 2, 
    "marked_for_deletion": false
}]
2018-02-12 07:48:25,637:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:48:25,637:DEBUG:About to wait on key /config, index None
2018-02-12 07:48:25,638:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:48:25,638:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:48:25,641:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:48:36,378:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/472879c4-4611-4762-a069-293e0081bcbf],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "a11785e2-0c2b-4131-9144-349155f958f5", 
                "ip_address": "10.98.76.3"
            }
        ], 
        "id": "472879c4-4611-4762-a069-293e0081bcbf", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:f0:f2:72", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": true, 
        "network_id": "82712b89-c35c-4276-83cb-818860d41f9e", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": true, 
        "operational_state": "NO_STATE", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 3, 
    "marked_for_deletion": false
}]
2018-02-12 07:48:36,379:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:48:36,380:DEBUG:About to wait on key /config, index None
2018-02-12 07:48:36,380:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:48:36,381:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:48:36,383:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:48:38,804:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/fd09eda4-10b1-4534-984a-7124c338c69d],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.4"
            }
        ], 
        "id": "fd09eda4-10b1-4534-984a-7124c338c69d", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:8e:dd:05", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": false, 
        "operational_state": "INIT", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 5, 
    "marked_for_deletion": false
}]
2018-02-12 07:48:38,804:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:48:38,805:DEBUG:About to wait on key /config, index None
2018-02-12 07:48:38,805:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:48:38,806:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:48:38,809:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
2018-02-12 07:48:49,308:DEBUG:
*** Consume stored data in etcd ***
 action=[set], key=[/config/v2.0/ports/fd09eda4-10b1-4534-984a-7124c338c69d],
 value=[{
    "body": {
        "ese_logical_port_id": null, 
        "allowed_address_pairs": [], 
        "device_owner": "compute:nova", 
        "fake_delete": true, 
        "fixed_ips": [
            {
                "subnet_id": "1244d619-cc55-4bb7-b181-606776ba5e88", 
                "ip_address": "10.121.232.4"
            }
        ], 
        "id": "fd09eda4-10b1-4534-984a-7124c338c69d", 
        "security_groups": [], 
        "binding:vif_type": "vrouter", 
        "mac_address": "fa:16:3e:8e:dd:05", 
        "status": "PENDING_UPDATE", 
        "description": "", 
        "tags": {}, 
        "segmentation_id": 0, 
        "device_id": "2e555b09-e0d7-4cce-8854-c481a2363917", 
        "name": "firewall-user-port", 
        "admin_state_up": false, 
        "network_id": "73b2c401-a1f3-49fb-8612-8c755b37a28d", 
        "tenant_id": "0f40dffa48614d9baa7eaac7e7532099", 
        "managed_by_service": false, 
        "attached": true, 
        "operational_state": "INIT", 
        "orchestration_state": "UPDATE_IN_PROGRESS", 
        "segmentation_type": "flat"
    }, 
    "version": 6, 
    "marked_for_deletion": false
}]
2018-02-12 07:48:49,309:DEBUG:New etcd client created for etcd-server:2379/v2
2018-02-12 07:48:49,310:DEBUG:About to wait on key /config, index None
2018-02-12 07:48:49,311:DEBUG:Issuing read for key /config with args {'recursive': True, 'timeout': None, 'wait': True}
2018-02-12 07:48:49,311:DEBUG:Starting new HTTP connection (1): etcd-server
2018-02-12 07:48:49,313:DEBUG:http://etcd-server:2379 "GET /v2/keys/config?recursive=true&wait=true HTTP/1.1" 200 None
